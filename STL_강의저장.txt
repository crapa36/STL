

====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 3:59:29 
====================
#include <iostream>
#include <string>
#include <string_view>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>

void save(std::string_view filename)
{
	//sudo
	//읽을 파일 열기
	std::ifstream in{ filename.data() };
	if (!in)
	{
		std::cout << "파일을 열 수 없습니다" << std::endl;
		exit(0);
	}
	// 쓸파일을 덮붙이기모드로 연다
	std::ofstream out("STL_강의저장.txt", std::ios::app);
	//저장된 시간을 파일에 기록
	auto now = std::chrono::system_clock::now();
	auto time = std::chrono::system_clock::to_time_t(now);      //utc
	auto lt = std::localtime(&time);                     //현지시간

	auto old = out.imbue(std::locale("ko_KR"));
	out << std::endl << std::endl;
	out << "====================" << std::endl;
	out << filename << std::put_time(lt, ", 저장시간 : %x %A %X ") << std::endl;
	out << "====================" << std::endl;

	out.imbue(old);
	// 읽을파일의 모든 내용을 쓸파일에 쓴다
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}

int main(){
	std::cout << "STL 입니다." << '\n';

	std::cout << sizeof(std::string) << std::endl;

	save("STL.cpp");
}

====================
save.h, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
#pragma once
//---------------------------------------------
// save.h
// 
// 한 학기 강의를 저장하는 함수
//---------------------------------------------
#pragma once

void save(std::string_view);

====================
save.cpp, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
#include <iostream>
#include <string>
#include <string_view>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>

void save(std::string_view filename) {
	//sudo
	//읽을 파일 열기
	std::ifstream in{ filename.data() };
	if (!in)
	{
		std::cout << "파일을 열 수 없습니다" << std::endl;
		exit(0);
	}
	// 쓸파일을 덮붙이기모드로 연다
	std::ofstream out("STL_강의저장.txt", std::ios::app);
	//저장된 시간을 파일에 기록
	auto now = std::chrono::system_clock::now();
	auto time = std::chrono::system_clock::to_time_t(now);      //utc
	auto lt = std::localtime(&time);                     //현지시간

	auto old = out.imbue(std::locale("ko_KR"));
	out << std::endl << std::endl;
	out << "====================" << std::endl;
	out << filename << std::put_time(lt, ", 저장시간 : %x %A %X ") << std::endl;
	out << "====================" << std::endl;

	out.imbue(old);
	// 읽을파일의 모든 내용을 쓸파일에 쓴다
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}


====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

//void save( string_view ); // 언제나 배열은 포인터로 변한다? const char[] 이런식으로 쓰지마라. string으로

//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

void change(int& a, int& b)
{
    int temp{ a };
    a = b;
    b = temp;
}

int main()
{
    int a{ 1 }, b{ 2 };
    change(a, b);
    cout << a << ", " << b << endl;

    save("save.h");
    save("save.cpp");
    save("STL.cpp");
}

//void save( string_view fileName ) {
//   // fileName을 읽을 파일로 연다.
//   //ifstream in;
//   //cout << sizeof in << endl; // 너 몇바이트 짜리야? ifstream은 272바이트 만큼 차지하네
//   //cout << addressof( in ) << endl; // 넌 어디에 살고 있니?, 얘는 괄호에 넣어야 하네.
//   //cout << typeid( in ).name() << endl; // 네 자료형은 뭐임?
//
//   ifstream in{ fileName.data()}; // 파일 포인터를 유지하게된다. data로 읽기모드로 파일을 열었다.
//   if (not in) { // !보단 not 초보자용 코드가 더 읽기 쉽다.
//      cout << fileName << " - 파일 열기 실패" << endl;
//      exit(0);
//   }
//
//   // 저장할 파일을 덧붙여 쓰기 모드로 연다.
//   ofstream out{ "2024 1학기 STL 월910화78 강의저장.txt", ios::app }; 
//   // output은 존재하지 않으면 새로 만들어서 상관 x
//   // input은 체크를 해야한다.
//
//
//   // 읽을 파일의 내용을 모두 읽어 쓸 파일에 덧붙여 쓴다.
//   // SLT 자료구조와 알고리즘을 이용해본다.
//   
//   // 저장한 시간기록
//   out << endl << endl << endl;
//   
//   auto now = chrono::system_clock::now();            // epoch로 부터 증가한 tick
//   auto time = chrono::system_clock::to_time_t(now);   // UTC 시간으로 변환
//   auto lt = localtime(&time);//포인터를 인자로 넘겨주면 컴파일러가 위험하다 한다. 현지시간으로 변환
//
//   auto old = out.imbue(locale("ko_KR")); // 출력파일의 지역을 한국으로 바꾼다.
//   // 날짜를 내 마음대로 출력한다.
//   out << "==============================================" << endl;
//   out << fileName << put_time(lt, ", 저장시간: %x %A %X ") << endl;
//   out << "==============================================" << endl;
//   out.imbue(old); // 원상복구 윈플때 브러시 쓰고 다시 원상복구 시키는 그런 것. 전세 살다가 나갈떄 원상복구 해야지
//
//   // 좋은 코딩은 아니다 저장을 위한 것.
//   //벡터 v에 코드의 모든 내용이 저장되어 있다.
//   vector<char> v{ istreambuf_iterator<char>{in}, {} };//초기화를 해볼 것이다.
//
//   //for (char c : v)
//   //   out << c; <- 이게더 좋은 코드라고 한다. 저장하는 코드인듯.
//
//   copy(v.begin(), v.end(), ostreambuf_iterator<char>{out}); // 알고리즘을 활용해 더 안좋은 코드지만 저장해봄
//   // 벡터의 시작부터 끝까지 out파일로 저장한다.
//   // 실행할 때마다 덧붙여서 저장된다.
//   
//}

====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 4:59:10 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main()
{
    Dog a{ 1 }, b{ 2 };
    change(a, b);
    cout << a << ", " << b << endl;

    //save("save.h");
    //save("save.cpp");
    save("STL.cpp");
}



====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:05:55 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);

    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:08:52 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:09:09 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:10:15 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:10:28 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:35:45 
====================
#include <random>
#include <iostream>
#include "save.h"
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main()
{
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    cout << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:37:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main()
{
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:49:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    int largest = numeric_limits<int>::min();
    for (int num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:52:47 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    auto pos = max_element(begin(a), end(a));
    cout << "최대값 = " << *pos << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:54:44 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:54:59 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[10000];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:04:32 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    array<int, 100> a;//배열대신 어레이

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:06:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:17:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    std::string_view filename;
    std::ofstream out("int값들.txt", std::ios::app);
    for (int num : a) {
        out << num << endl;
    }
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:19:18 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << endl;
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:25:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:25:30 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:26:13 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:26:29 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:27:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:39:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main(){
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:39:56 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:40:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:40:45 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count=0;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:49:07 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
   
    cout << *max_element(istream_iterator<int>{in}, {}) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 3:35:57 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a{};
    ifstream in("int값들.txt");
    for (int num : a) {
        print("{:8}", num);
    }


    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 3:51:00 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    for (int num : a) {
        print("{:8}", num);
    }


    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:05:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    ofstream out{"int100개를메모리그대로저장.txt"};
    out.write((char*)(a.data()), a.size() * sizeof(int));
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:19:08 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    ofstream out{"int100개를메모리그대로저장.txt",ios::binary};
    out.write((const char*)(a.data()),400);
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:48:52 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};
    ifstream in{ "int100개를메모리그대로저장.txt",(ios::binary) };
    
    in.read((char*)a.data(), 400);
    for (int num : a) {
        cout << num << "\t";
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:49:25 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};
    ifstream in{ "int100개를메모리그대로저장.txt",(ios::binary) };
    
    in.read((char*)a.data(), 400);
    for (int num : a) {
        cout << num << "\t";
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:20 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num<<endl;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:43 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num<<endl;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:58 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:13:56 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{ (char)uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num;
    }
};
//문제 : int 100개를 저장하는데 메모리 bit값을 그대로 저장하자.
//int 100개 = sizeof(int) * 100 = 400 bytes
void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog : dogs) {
        cout << dog << endl;
    }
    ofstream out{ "int100개를그대로저장.txt",(ios::binary) };
    out.write((const char*)(dogs.data()), sizeof(dogs));
    save("STL.cpp");
}


====================
STL_강의저장.txt, 저장시간 : 2024-03-18 월요일 오후 6:53:22 
====================


====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 3:59:29 
====================
#include <iostream>
#include <string>
#include <string_view>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>

void save(std::string_view filename)
{
	//sudo
	//읽을 파일 열기
	std::ifstream in{ filename.data() };
	if (!in)
	{
		std::cout << "파일을 열 수 없습니다" << std::endl;
		exit(0);
	}
	// 쓸파일을 덮붙이기모드로 연다
	std::ofstream out("STL_강의저장.txt", std::ios::app);
	//저장된 시간을 파일에 기록
	auto now = std::chrono::system_clock::now();
	auto time = std::chrono::system_clock::to_time_t(now);      //utc
	auto lt = std::localtime(&time);                     //현지시간

	auto old = out.imbue(std::locale("ko_KR"));
	out << std::endl << std::endl;
	out << "====================" << std::endl;
	out << filename << std::put_time(lt, ", 저장시간 : %x %A %X ") << std::endl;
	out << "====================" << std::endl;

	out.imbue(old);
	// 읽을파일의 모든 내용을 쓸파일에 쓴다
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}

int main(){
	std::cout << "STL 입니다." << '\n';

	std::cout << sizeof(std::string) << std::endl;

	save("STL.cpp");
}

====================
save.h, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
#pragma once
//---------------------------------------------
// save.h
// 
// 한 학기 강의를 저장하는 함수
//---------------------------------------------
#pragma once

void save(std::string_view);

====================
save.cpp, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
#include <iostream>
#include <string>
#include <string_view>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>

void save(std::string_view filename) {
	//sudo
	//읽을 파일 열기
	std::ifstream in{ filename.data() };
	if (!in)
	{
		std::cout << "파일을 열 수 없습니다" << std::endl;
		exit(0);
	}
	// 쓸파일을 덮붙이기모드로 연다
	std::ofstream out("STL_강의저장.txt", std::ios::app);
	//저장된 시간을 파일에 기록
	auto now = std::chrono::system_clock::now();
	auto time = std::chrono::system_clock::to_time_t(now);      //utc
	auto lt = std::localtime(&time);                     //현지시간

	auto old = out.imbue(std::locale("ko_KR"));
	out << std::endl << std::endl;
	out << "====================" << std::endl;
	out << filename << std::put_time(lt, ", 저장시간 : %x %A %X ") << std::endl;
	out << "====================" << std::endl;

	out.imbue(old);
	// 읽을파일의 모든 내용을 쓸파일에 쓴다
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}


====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

//void save( string_view ); // 언제나 배열은 포인터로 변한다? const char[] 이런식으로 쓰지마라. string으로

//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

void change(int& a, int& b)
{
    int temp{ a };
    a = b;
    b = temp;
}

int main()
{
    int a{ 1 }, b{ 2 };
    change(a, b);
    cout << a << ", " << b << endl;

    save("save.h");
    save("save.cpp");
    save("STL.cpp");
}

//void save( string_view fileName ) {
//   // fileName을 읽을 파일로 연다.
//   //ifstream in;
//   //cout << sizeof in << endl; // 너 몇바이트 짜리야? ifstream은 272바이트 만큼 차지하네
//   //cout << addressof( in ) << endl; // 넌 어디에 살고 있니?, 얘는 괄호에 넣어야 하네.
//   //cout << typeid( in ).name() << endl; // 네 자료형은 뭐임?
//
//   ifstream in{ fileName.data()}; // 파일 포인터를 유지하게된다. data로 읽기모드로 파일을 열었다.
//   if (not in) { // !보단 not 초보자용 코드가 더 읽기 쉽다.
//      cout << fileName << " - 파일 열기 실패" << endl;
//      exit(0);
//   }
//
//   // 저장할 파일을 덧붙여 쓰기 모드로 연다.
//   ofstream out{ "2024 1학기 STL 월910화78 강의저장.txt", ios::app }; 
//   // output은 존재하지 않으면 새로 만들어서 상관 x
//   // input은 체크를 해야한다.
//
//
//   // 읽을 파일의 내용을 모두 읽어 쓸 파일에 덧붙여 쓴다.
//   // SLT 자료구조와 알고리즘을 이용해본다.
//   
//   // 저장한 시간기록
//   out << endl << endl << endl;
//   
//   auto now = chrono::system_clock::now();            // epoch로 부터 증가한 tick
//   auto time = chrono::system_clock::to_time_t(now);   // UTC 시간으로 변환
//   auto lt = localtime(&time);//포인터를 인자로 넘겨주면 컴파일러가 위험하다 한다. 현지시간으로 변환
//
//   auto old = out.imbue(locale("ko_KR")); // 출력파일의 지역을 한국으로 바꾼다.
//   // 날짜를 내 마음대로 출력한다.
//   out << "==============================================" << endl;
//   out << fileName << put_time(lt, ", 저장시간: %x %A %X ") << endl;
//   out << "==============================================" << endl;
//   out.imbue(old); // 원상복구 윈플때 브러시 쓰고 다시 원상복구 시키는 그런 것. 전세 살다가 나갈떄 원상복구 해야지
//
//   // 좋은 코딩은 아니다 저장을 위한 것.
//   //벡터 v에 코드의 모든 내용이 저장되어 있다.
//   vector<char> v{ istreambuf_iterator<char>{in}, {} };//초기화를 해볼 것이다.
//
//   //for (char c : v)
//   //   out << c; <- 이게더 좋은 코드라고 한다. 저장하는 코드인듯.
//
//   copy(v.begin(), v.end(), ostreambuf_iterator<char>{out}); // 알고리즘을 활용해 더 안좋은 코드지만 저장해봄
//   // 벡터의 시작부터 끝까지 out파일로 저장한다.
//   // 실행할 때마다 덧붙여서 저장된다.
//   
//}

====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 4:59:10 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main()
{
    Dog a{ 1 }, b{ 2 };
    change(a, b);
    cout << a << ", " << b << endl;

    //save("save.h");
    //save("save.cpp");
    save("STL.cpp");
}



====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:05:55 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);

    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:08:52 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:09:09 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:10:15 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:10:28 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:35:45 
====================
#include <random>
#include <iostream>
#include "save.h"
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main()
{
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    cout << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:37:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main()
{
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:49:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    int largest = numeric_limits<int>::min();
    for (int num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:52:47 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    auto pos = max_element(begin(a), end(a));
    cout << "최대값 = " << *pos << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:54:44 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:54:59 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[10000];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:04:32 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    array<int, 100> a;//배열대신 어레이

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:06:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:17:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    std::string_view filename;
    std::ofstream out("int값들.txt", std::ios::app);
    for (int num : a) {
        out << num << endl;
    }
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:19:18 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << endl;
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:25:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:25:30 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:26:13 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:26:29 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:27:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:39:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main(){
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:39:56 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:40:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:40:45 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count=0;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:49:07 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
   
    cout << *max_element(istream_iterator<int>{in}, {}) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 3:35:57 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a{};
    ifstream in("int값들.txt");
    for (int num : a) {
        print("{:8}", num);
    }


    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 3:51:00 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    for (int num : a) {
        print("{:8}", num);
    }


    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:05:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    ofstream out{"int100개를메모리그대로저장.txt"};
    out.write((char*)(a.data()), a.size() * sizeof(int));
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:19:08 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    ofstream out{"int100개를메모리그대로저장.txt",ios::binary};
    out.write((const char*)(a.data()),400);
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:48:52 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};
    ifstream in{ "int100개를메모리그대로저장.txt",(ios::binary) };
    
    in.read((char*)a.data(), 400);
    for (int num : a) {
        cout << num << "\t";
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:49:25 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};
    ifstream in{ "int100개를메모리그대로저장.txt",(ios::binary) };
    
    in.read((char*)a.data(), 400);
    for (int num : a) {
        cout << num << "\t";
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:20 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num<<endl;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:43 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num<<endl;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:58 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:13:56 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{ (char)uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num;
    }
};
//문제 : int 100개를 저장하는데 메모리 bit값을 그대로 저장하자.
//int 100개 = sizeof(int) * 100 = 400 bytes
void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog : dogs) {
        cout << dog << endl;
    }
    ofstream out{ "int100개를그대로저장.txt",(ios::binary) };
    out.write((const char*)(dogs.data()), sizeof(dogs));
    save("STL.cpp");
}


====================
STL_강의저장.txt, 저장시간 : 2024-03-18 월요일 오후 6:53:22 
====================


====================
STL_강의저장.txt, 저장시간 : 2024-03-18 월요일 오후 6:55:37 
====================


====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 3:59:29 
====================
#include <iostream>
#include <string>
#include <string_view>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>

void save(std::string_view filename)
{
	//sudo
	//읽을 파일 열기
	std::ifstream in{ filename.data() };
	if (!in)
	{
		std::cout << "파일을 열 수 없습니다" << std::endl;
		exit(0);
	}
	// 쓸파일을 덮붙이기모드로 연다
	std::ofstream out("STL_강의저장.txt", std::ios::app);
	//저장된 시간을 파일에 기록
	auto now = std::chrono::system_clock::now();
	auto time = std::chrono::system_clock::to_time_t(now);      //utc
	auto lt = std::localtime(&time);                     //현지시간

	auto old = out.imbue(std::locale("ko_KR"));
	out << std::endl << std::endl;
	out << "====================" << std::endl;
	out << filename << std::put_time(lt, ", 저장시간 : %x %A %X ") << std::endl;
	out << "====================" << std::endl;

	out.imbue(old);
	// 읽을파일의 모든 내용을 쓸파일에 쓴다
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}

int main(){
	std::cout << "STL 입니다." << '\n';

	std::cout << sizeof(std::string) << std::endl;

	save("STL.cpp");
}

====================
save.h, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
#pragma once
//---------------------------------------------
// save.h
// 
// 한 학기 강의를 저장하는 함수
//---------------------------------------------
#pragma once

void save(std::string_view);

====================
save.cpp, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
#include <iostream>
#include <string>
#include <string_view>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>

void save(std::string_view filename) {
	//sudo
	//읽을 파일 열기
	std::ifstream in{ filename.data() };
	if (!in)
	{
		std::cout << "파일을 열 수 없습니다" << std::endl;
		exit(0);
	}
	// 쓸파일을 덮붙이기모드로 연다
	std::ofstream out("STL_강의저장.txt", std::ios::app);
	//저장된 시간을 파일에 기록
	auto now = std::chrono::system_clock::now();
	auto time = std::chrono::system_clock::to_time_t(now);      //utc
	auto lt = std::localtime(&time);                     //현지시간

	auto old = out.imbue(std::locale("ko_KR"));
	out << std::endl << std::endl;
	out << "====================" << std::endl;
	out << filename << std::put_time(lt, ", 저장시간 : %x %A %X ") << std::endl;
	out << "====================" << std::endl;

	out.imbue(old);
	// 읽을파일의 모든 내용을 쓸파일에 쓴다
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}


====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

//void save( string_view ); // 언제나 배열은 포인터로 변한다? const char[] 이런식으로 쓰지마라. string으로

//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

void change(int& a, int& b)
{
    int temp{ a };
    a = b;
    b = temp;
}

int main()
{
    int a{ 1 }, b{ 2 };
    change(a, b);
    cout << a << ", " << b << endl;

    save("save.h");
    save("save.cpp");
    save("STL.cpp");
}

//void save( string_view fileName ) {
//   // fileName을 읽을 파일로 연다.
//   //ifstream in;
//   //cout << sizeof in << endl; // 너 몇바이트 짜리야? ifstream은 272바이트 만큼 차지하네
//   //cout << addressof( in ) << endl; // 넌 어디에 살고 있니?, 얘는 괄호에 넣어야 하네.
//   //cout << typeid( in ).name() << endl; // 네 자료형은 뭐임?
//
//   ifstream in{ fileName.data()}; // 파일 포인터를 유지하게된다. data로 읽기모드로 파일을 열었다.
//   if (not in) { // !보단 not 초보자용 코드가 더 읽기 쉽다.
//      cout << fileName << " - 파일 열기 실패" << endl;
//      exit(0);
//   }
//
//   // 저장할 파일을 덧붙여 쓰기 모드로 연다.
//   ofstream out{ "2024 1학기 STL 월910화78 강의저장.txt", ios::app }; 
//   // output은 존재하지 않으면 새로 만들어서 상관 x
//   // input은 체크를 해야한다.
//
//
//   // 읽을 파일의 내용을 모두 읽어 쓸 파일에 덧붙여 쓴다.
//   // SLT 자료구조와 알고리즘을 이용해본다.
//   
//   // 저장한 시간기록
//   out << endl << endl << endl;
//   
//   auto now = chrono::system_clock::now();            // epoch로 부터 증가한 tick
//   auto time = chrono::system_clock::to_time_t(now);   // UTC 시간으로 변환
//   auto lt = localtime(&time);//포인터를 인자로 넘겨주면 컴파일러가 위험하다 한다. 현지시간으로 변환
//
//   auto old = out.imbue(locale("ko_KR")); // 출력파일의 지역을 한국으로 바꾼다.
//   // 날짜를 내 마음대로 출력한다.
//   out << "==============================================" << endl;
//   out << fileName << put_time(lt, ", 저장시간: %x %A %X ") << endl;
//   out << "==============================================" << endl;
//   out.imbue(old); // 원상복구 윈플때 브러시 쓰고 다시 원상복구 시키는 그런 것. 전세 살다가 나갈떄 원상복구 해야지
//
//   // 좋은 코딩은 아니다 저장을 위한 것.
//   //벡터 v에 코드의 모든 내용이 저장되어 있다.
//   vector<char> v{ istreambuf_iterator<char>{in}, {} };//초기화를 해볼 것이다.
//
//   //for (char c : v)
//   //   out << c; <- 이게더 좋은 코드라고 한다. 저장하는 코드인듯.
//
//   copy(v.begin(), v.end(), ostreambuf_iterator<char>{out}); // 알고리즘을 활용해 더 안좋은 코드지만 저장해봄
//   // 벡터의 시작부터 끝까지 out파일로 저장한다.
//   // 실행할 때마다 덧붙여서 저장된다.
//   
//}

====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 4:59:10 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main()
{
    Dog a{ 1 }, b{ 2 };
    change(a, b);
    cout << a << ", " << b << endl;

    //save("save.h");
    //save("save.cpp");
    save("STL.cpp");
}



====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:05:55 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);

    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:08:52 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:09:09 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:10:15 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:10:28 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:35:45 
====================
#include <random>
#include <iostream>
#include "save.h"
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main()
{
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    cout << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:37:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main()
{
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:49:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    int largest = numeric_limits<int>::min();
    for (int num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:52:47 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    auto pos = max_element(begin(a), end(a));
    cout << "최대값 = " << *pos << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:54:44 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:54:59 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[10000];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:04:32 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    array<int, 100> a;//배열대신 어레이

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:06:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:17:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    std::string_view filename;
    std::ofstream out("int값들.txt", std::ios::app);
    for (int num : a) {
        out << num << endl;
    }
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:19:18 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << endl;
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:25:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:25:30 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:26:13 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:26:29 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:27:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:39:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main(){
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:39:56 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:40:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:40:45 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count=0;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:49:07 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
   
    cout << *max_element(istream_iterator<int>{in}, {}) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 3:35:57 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a{};
    ifstream in("int값들.txt");
    for (int num : a) {
        print("{:8}", num);
    }


    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 3:51:00 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    for (int num : a) {
        print("{:8}", num);
    }


    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:05:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    ofstream out{"int100개를메모리그대로저장.txt"};
    out.write((char*)(a.data()), a.size() * sizeof(int));
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:19:08 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    ofstream out{"int100개를메모리그대로저장.txt",ios::binary};
    out.write((const char*)(a.data()),400);
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:48:52 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};
    ifstream in{ "int100개를메모리그대로저장.txt",(ios::binary) };
    
    in.read((char*)a.data(), 400);
    for (int num : a) {
        cout << num << "\t";
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:49:25 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};
    ifstream in{ "int100개를메모리그대로저장.txt",(ios::binary) };
    
    in.read((char*)a.data(), 400);
    for (int num : a) {
        cout << num << "\t";
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:20 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num<<endl;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:43 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num<<endl;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:58 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:13:56 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{ (char)uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num;
    }
};
//문제 : int 100개를 저장하는데 메모리 bit값을 그대로 저장하자.
//int 100개 = sizeof(int) * 100 = 400 bytes
void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog : dogs) {
        cout << dog << endl;
    }
    ofstream out{ "int100개를그대로저장.txt",(ios::binary) };
    out.write((const char*)(dogs.data()), sizeof(dogs));
    save("STL.cpp");
}


====================
STL_강의저장.txt, 저장시간 : 2024-03-18 월요일 오후 6:53:22 
====================


====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 3:59:29 
====================
#include <iostream>
#include <string>
#include <string_view>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>

void save(std::string_view filename)
{
	//sudo
	//읽을 파일 열기
	std::ifstream in{ filename.data() };
	if (!in)
	{
		std::cout << "파일을 열 수 없습니다" << std::endl;
		exit(0);
	}
	// 쓸파일을 덮붙이기모드로 연다
	std::ofstream out("STL_강의저장.txt", std::ios::app);
	//저장된 시간을 파일에 기록
	auto now = std::chrono::system_clock::now();
	auto time = std::chrono::system_clock::to_time_t(now);      //utc
	auto lt = std::localtime(&time);                     //현지시간

	auto old = out.imbue(std::locale("ko_KR"));
	out << std::endl << std::endl;
	out << "====================" << std::endl;
	out << filename << std::put_time(lt, ", 저장시간 : %x %A %X ") << std::endl;
	out << "====================" << std::endl;

	out.imbue(old);
	// 읽을파일의 모든 내용을 쓸파일에 쓴다
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}

int main(){
	std::cout << "STL 입니다." << '\n';

	std::cout << sizeof(std::string) << std::endl;

	save("STL.cpp");
}

====================
save.h, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
#pragma once
//---------------------------------------------
// save.h
// 
// 한 학기 강의를 저장하는 함수
//---------------------------------------------
#pragma once

void save(std::string_view);

====================
save.cpp, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
#include <iostream>
#include <string>
#include <string_view>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>

void save(std::string_view filename) {
	//sudo
	//읽을 파일 열기
	std::ifstream in{ filename.data() };
	if (!in)
	{
		std::cout << "파일을 열 수 없습니다" << std::endl;
		exit(0);
	}
	// 쓸파일을 덮붙이기모드로 연다
	std::ofstream out("STL_강의저장.txt", std::ios::app);
	//저장된 시간을 파일에 기록
	auto now = std::chrono::system_clock::now();
	auto time = std::chrono::system_clock::to_time_t(now);      //utc
	auto lt = std::localtime(&time);                     //현지시간

	auto old = out.imbue(std::locale("ko_KR"));
	out << std::endl << std::endl;
	out << "====================" << std::endl;
	out << filename << std::put_time(lt, ", 저장시간 : %x %A %X ") << std::endl;
	out << "====================" << std::endl;

	out.imbue(old);
	// 읽을파일의 모든 내용을 쓸파일에 쓴다
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}


====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

//void save( string_view ); // 언제나 배열은 포인터로 변한다? const char[] 이런식으로 쓰지마라. string으로

//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

void change(int& a, int& b)
{
    int temp{ a };
    a = b;
    b = temp;
}

int main()
{
    int a{ 1 }, b{ 2 };
    change(a, b);
    cout << a << ", " << b << endl;

    save("save.h");
    save("save.cpp");
    save("STL.cpp");
}

//void save( string_view fileName ) {
//   // fileName을 읽을 파일로 연다.
//   //ifstream in;
//   //cout << sizeof in << endl; // 너 몇바이트 짜리야? ifstream은 272바이트 만큼 차지하네
//   //cout << addressof( in ) << endl; // 넌 어디에 살고 있니?, 얘는 괄호에 넣어야 하네.
//   //cout << typeid( in ).name() << endl; // 네 자료형은 뭐임?
//
//   ifstream in{ fileName.data()}; // 파일 포인터를 유지하게된다. data로 읽기모드로 파일을 열었다.
//   if (not in) { // !보단 not 초보자용 코드가 더 읽기 쉽다.
//      cout << fileName << " - 파일 열기 실패" << endl;
//      exit(0);
//   }
//
//   // 저장할 파일을 덧붙여 쓰기 모드로 연다.
//   ofstream out{ "2024 1학기 STL 월910화78 강의저장.txt", ios::app }; 
//   // output은 존재하지 않으면 새로 만들어서 상관 x
//   // input은 체크를 해야한다.
//
//
//   // 읽을 파일의 내용을 모두 읽어 쓸 파일에 덧붙여 쓴다.
//   // SLT 자료구조와 알고리즘을 이용해본다.
//   
//   // 저장한 시간기록
//   out << endl << endl << endl;
//   
//   auto now = chrono::system_clock::now();            // epoch로 부터 증가한 tick
//   auto time = chrono::system_clock::to_time_t(now);   // UTC 시간으로 변환
//   auto lt = localtime(&time);//포인터를 인자로 넘겨주면 컴파일러가 위험하다 한다. 현지시간으로 변환
//
//   auto old = out.imbue(locale("ko_KR")); // 출력파일의 지역을 한국으로 바꾼다.
//   // 날짜를 내 마음대로 출력한다.
//   out << "==============================================" << endl;
//   out << fileName << put_time(lt, ", 저장시간: %x %A %X ") << endl;
//   out << "==============================================" << endl;
//   out.imbue(old); // 원상복구 윈플때 브러시 쓰고 다시 원상복구 시키는 그런 것. 전세 살다가 나갈떄 원상복구 해야지
//
//   // 좋은 코딩은 아니다 저장을 위한 것.
//   //벡터 v에 코드의 모든 내용이 저장되어 있다.
//   vector<char> v{ istreambuf_iterator<char>{in}, {} };//초기화를 해볼 것이다.
//
//   //for (char c : v)
//   //   out << c; <- 이게더 좋은 코드라고 한다. 저장하는 코드인듯.
//
//   copy(v.begin(), v.end(), ostreambuf_iterator<char>{out}); // 알고리즘을 활용해 더 안좋은 코드지만 저장해봄
//   // 벡터의 시작부터 끝까지 out파일로 저장한다.
//   // 실행할 때마다 덧붙여서 저장된다.
//   
//}

====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 4:59:10 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main()
{
    Dog a{ 1 }, b{ 2 };
    change(a, b);
    cout << a << ", " << b << endl;

    //save("save.h");
    //save("save.cpp");
    save("STL.cpp");
}



====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:05:55 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);

    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:08:52 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:09:09 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:10:15 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:10:28 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:35:45 
====================
#include <random>
#include <iostream>
#include "save.h"
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main()
{
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    cout << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:37:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main()
{
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:49:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    int largest = numeric_limits<int>::min();
    for (int num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:52:47 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    auto pos = max_element(begin(a), end(a));
    cout << "최대값 = " << *pos << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:54:44 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:54:59 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[10000];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:04:32 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    array<int, 100> a;//배열대신 어레이

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:06:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:17:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    std::string_view filename;
    std::ofstream out("int값들.txt", std::ios::app);
    for (int num : a) {
        out << num << endl;
    }
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:19:18 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << endl;
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:25:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:25:30 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:26:13 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:26:29 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:27:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:39:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main(){
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:39:56 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:40:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:40:45 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count=0;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:49:07 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
   
    cout << *max_element(istream_iterator<int>{in}, {}) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 3:35:57 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a{};
    ifstream in("int값들.txt");
    for (int num : a) {
        print("{:8}", num);
    }


    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 3:51:00 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    for (int num : a) {
        print("{:8}", num);
    }


    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:05:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    ofstream out{"int100개를메모리그대로저장.txt"};
    out.write((char*)(a.data()), a.size() * sizeof(int));
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:19:08 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    ofstream out{"int100개를메모리그대로저장.txt",ios::binary};
    out.write((const char*)(a.data()),400);
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:48:52 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};
    ifstream in{ "int100개를메모리그대로저장.txt",(ios::binary) };
    
    in.read((char*)a.data(), 400);
    for (int num : a) {
        cout << num << "\t";
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:49:25 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};
    ifstream in{ "int100개를메모리그대로저장.txt",(ios::binary) };
    
    in.read((char*)a.data(), 400);
    for (int num : a) {
        cout << num << "\t";
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:20 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num<<endl;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:43 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num<<endl;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:58 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:13:56 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{ (char)uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num;
    }
};
//문제 : int 100개를 저장하는데 메모리 bit값을 그대로 저장하자.
//int 100개 = sizeof(int) * 100 = 400 bytes
void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog : dogs) {
        cout << dog << endl;
    }
    ofstream out{ "int100개를그대로저장.txt",(ios::binary) };
    out.write((const char*)(dogs.data()), sizeof(dogs));
    save("STL.cpp");
}


====================
STL_강의저장.txt, 저장시간 : 2024-03-18 월요일 오후 6:53:22 
====================


====================
STL_강의저장.txt, 저장시간 : 2024-03-18 월요일 오후 6:55:37 
====================


====================
STL_강의저장.txt, 저장시간 : 2024-03-18 월요일 오후 6:56:25 
====================


====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 3:59:29 
====================
#include <iostream>
#include <string>
#include <string_view>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>

void save(std::string_view filename)
{
	//sudo
	//읽을 파일 열기
	std::ifstream in{ filename.data() };
	if (!in)
	{
		std::cout << "파일을 열 수 없습니다" << std::endl;
		exit(0);
	}
	// 쓸파일을 덮붙이기모드로 연다
	std::ofstream out("STL_강의저장.txt", std::ios::app);
	//저장된 시간을 파일에 기록
	auto now = std::chrono::system_clock::now();
	auto time = std::chrono::system_clock::to_time_t(now);      //utc
	auto lt = std::localtime(&time);                     //현지시간

	auto old = out.imbue(std::locale("ko_KR"));
	out << std::endl << std::endl;
	out << "====================" << std::endl;
	out << filename << std::put_time(lt, ", 저장시간 : %x %A %X ") << std::endl;
	out << "====================" << std::endl;

	out.imbue(old);
	// 읽을파일의 모든 내용을 쓸파일에 쓴다
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}

int main(){
	std::cout << "STL 입니다." << '\n';

	std::cout << sizeof(std::string) << std::endl;

	save("STL.cpp");
}

====================
save.h, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
#pragma once
//---------------------------------------------
// save.h
// 
// 한 학기 강의를 저장하는 함수
//---------------------------------------------
#pragma once

void save(std::string_view);

====================
save.cpp, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
#include <iostream>
#include <string>
#include <string_view>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>

void save(std::string_view filename) {
	//sudo
	//읽을 파일 열기
	std::ifstream in{ filename.data() };
	if (!in)
	{
		std::cout << "파일을 열 수 없습니다" << std::endl;
		exit(0);
	}
	// 쓸파일을 덮붙이기모드로 연다
	std::ofstream out("STL_강의저장.txt", std::ios::app);
	//저장된 시간을 파일에 기록
	auto now = std::chrono::system_clock::now();
	auto time = std::chrono::system_clock::to_time_t(now);      //utc
	auto lt = std::localtime(&time);                     //현지시간

	auto old = out.imbue(std::locale("ko_KR"));
	out << std::endl << std::endl;
	out << "====================" << std::endl;
	out << filename << std::put_time(lt, ", 저장시간 : %x %A %X ") << std::endl;
	out << "====================" << std::endl;

	out.imbue(old);
	// 읽을파일의 모든 내용을 쓸파일에 쓴다
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}


====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

//void save( string_view ); // 언제나 배열은 포인터로 변한다? const char[] 이런식으로 쓰지마라. string으로

//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

void change(int& a, int& b)
{
    int temp{ a };
    a = b;
    b = temp;
}

int main()
{
    int a{ 1 }, b{ 2 };
    change(a, b);
    cout << a << ", " << b << endl;

    save("save.h");
    save("save.cpp");
    save("STL.cpp");
}

//void save( string_view fileName ) {
//   // fileName을 읽을 파일로 연다.
//   //ifstream in;
//   //cout << sizeof in << endl; // 너 몇바이트 짜리야? ifstream은 272바이트 만큼 차지하네
//   //cout << addressof( in ) << endl; // 넌 어디에 살고 있니?, 얘는 괄호에 넣어야 하네.
//   //cout << typeid( in ).name() << endl; // 네 자료형은 뭐임?
//
//   ifstream in{ fileName.data()}; // 파일 포인터를 유지하게된다. data로 읽기모드로 파일을 열었다.
//   if (not in) { // !보단 not 초보자용 코드가 더 읽기 쉽다.
//      cout << fileName << " - 파일 열기 실패" << endl;
//      exit(0);
//   }
//
//   // 저장할 파일을 덧붙여 쓰기 모드로 연다.
//   ofstream out{ "2024 1학기 STL 월910화78 강의저장.txt", ios::app }; 
//   // output은 존재하지 않으면 새로 만들어서 상관 x
//   // input은 체크를 해야한다.
//
//
//   // 읽을 파일의 내용을 모두 읽어 쓸 파일에 덧붙여 쓴다.
//   // SLT 자료구조와 알고리즘을 이용해본다.
//   
//   // 저장한 시간기록
//   out << endl << endl << endl;
//   
//   auto now = chrono::system_clock::now();            // epoch로 부터 증가한 tick
//   auto time = chrono::system_clock::to_time_t(now);   // UTC 시간으로 변환
//   auto lt = localtime(&time);//포인터를 인자로 넘겨주면 컴파일러가 위험하다 한다. 현지시간으로 변환
//
//   auto old = out.imbue(locale("ko_KR")); // 출력파일의 지역을 한국으로 바꾼다.
//   // 날짜를 내 마음대로 출력한다.
//   out << "==============================================" << endl;
//   out << fileName << put_time(lt, ", 저장시간: %x %A %X ") << endl;
//   out << "==============================================" << endl;
//   out.imbue(old); // 원상복구 윈플때 브러시 쓰고 다시 원상복구 시키는 그런 것. 전세 살다가 나갈떄 원상복구 해야지
//
//   // 좋은 코딩은 아니다 저장을 위한 것.
//   //벡터 v에 코드의 모든 내용이 저장되어 있다.
//   vector<char> v{ istreambuf_iterator<char>{in}, {} };//초기화를 해볼 것이다.
//
//   //for (char c : v)
//   //   out << c; <- 이게더 좋은 코드라고 한다. 저장하는 코드인듯.
//
//   copy(v.begin(), v.end(), ostreambuf_iterator<char>{out}); // 알고리즘을 활용해 더 안좋은 코드지만 저장해봄
//   // 벡터의 시작부터 끝까지 out파일로 저장한다.
//   // 실행할 때마다 덧붙여서 저장된다.
//   
//}

====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 4:59:10 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main()
{
    Dog a{ 1 }, b{ 2 };
    change(a, b);
    cout << a << ", " << b << endl;

    //save("save.h");
    //save("save.cpp");
    save("STL.cpp");
}



====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:05:55 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);

    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:08:52 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:09:09 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:10:15 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:10:28 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:35:45 
====================
#include <random>
#include <iostream>
#include "save.h"
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main()
{
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    cout << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:37:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main()
{
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:49:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    int largest = numeric_limits<int>::min();
    for (int num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:52:47 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    auto pos = max_element(begin(a), end(a));
    cout << "최대값 = " << *pos << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:54:44 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:54:59 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[10000];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:04:32 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    array<int, 100> a;//배열대신 어레이

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:06:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:17:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    std::string_view filename;
    std::ofstream out("int값들.txt", std::ios::app);
    for (int num : a) {
        out << num << endl;
    }
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:19:18 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << endl;
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:25:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:25:30 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:26:13 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:26:29 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:27:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:39:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main(){
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:39:56 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:40:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:40:45 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count=0;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:49:07 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
   
    cout << *max_element(istream_iterator<int>{in}, {}) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 3:35:57 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a{};
    ifstream in("int값들.txt");
    for (int num : a) {
        print("{:8}", num);
    }


    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 3:51:00 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    for (int num : a) {
        print("{:8}", num);
    }


    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:05:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    ofstream out{"int100개를메모리그대로저장.txt"};
    out.write((char*)(a.data()), a.size() * sizeof(int));
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:19:08 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    ofstream out{"int100개를메모리그대로저장.txt",ios::binary};
    out.write((const char*)(a.data()),400);
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:48:52 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};
    ifstream in{ "int100개를메모리그대로저장.txt",(ios::binary) };
    
    in.read((char*)a.data(), 400);
    for (int num : a) {
        cout << num << "\t";
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:49:25 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};
    ifstream in{ "int100개를메모리그대로저장.txt",(ios::binary) };
    
    in.read((char*)a.data(), 400);
    for (int num : a) {
        cout << num << "\t";
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:20 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num<<endl;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:43 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num<<endl;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:58 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:13:56 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{ (char)uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num;
    }
};
//문제 : int 100개를 저장하는데 메모리 bit값을 그대로 저장하자.
//int 100개 = sizeof(int) * 100 = 400 bytes
void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog : dogs) {
        cout << dog << endl;
    }
    ofstream out{ "int100개를그대로저장.txt",(ios::binary) };
    out.write((const char*)(dogs.data()), sizeof(dogs));
    save("STL.cpp");
}


====================
STL_강의저장.txt, 저장시간 : 2024-03-18 월요일 오후 6:53:22 
====================


====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 3:59:29 
====================
#include <iostream>
#include <string>
#include <string_view>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>

void save(std::string_view filename)
{
	//sudo
	//읽을 파일 열기
	std::ifstream in{ filename.data() };
	if (!in)
	{
		std::cout << "파일을 열 수 없습니다" << std::endl;
		exit(0);
	}
	// 쓸파일을 덮붙이기모드로 연다
	std::ofstream out("STL_강의저장.txt", std::ios::app);
	//저장된 시간을 파일에 기록
	auto now = std::chrono::system_clock::now();
	auto time = std::chrono::system_clock::to_time_t(now);      //utc
	auto lt = std::localtime(&time);                     //현지시간

	auto old = out.imbue(std::locale("ko_KR"));
	out << std::endl << std::endl;
	out << "====================" << std::endl;
	out << filename << std::put_time(lt, ", 저장시간 : %x %A %X ") << std::endl;
	out << "====================" << std::endl;

	out.imbue(old);
	// 읽을파일의 모든 내용을 쓸파일에 쓴다
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}

int main(){
	std::cout << "STL 입니다." << '\n';

	std::cout << sizeof(std::string) << std::endl;

	save("STL.cpp");
}

====================
save.h, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
#pragma once
//---------------------------------------------
// save.h
// 
// 한 학기 강의를 저장하는 함수
//---------------------------------------------
#pragma once

void save(std::string_view);

====================
save.cpp, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
#include <iostream>
#include <string>
#include <string_view>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>

void save(std::string_view filename) {
	//sudo
	//읽을 파일 열기
	std::ifstream in{ filename.data() };
	if (!in)
	{
		std::cout << "파일을 열 수 없습니다" << std::endl;
		exit(0);
	}
	// 쓸파일을 덮붙이기모드로 연다
	std::ofstream out("STL_강의저장.txt", std::ios::app);
	//저장된 시간을 파일에 기록
	auto now = std::chrono::system_clock::now();
	auto time = std::chrono::system_clock::to_time_t(now);      //utc
	auto lt = std::localtime(&time);                     //현지시간

	auto old = out.imbue(std::locale("ko_KR"));
	out << std::endl << std::endl;
	out << "====================" << std::endl;
	out << filename << std::put_time(lt, ", 저장시간 : %x %A %X ") << std::endl;
	out << "====================" << std::endl;

	out.imbue(old);
	// 읽을파일의 모든 내용을 쓸파일에 쓴다
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}


====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

//void save( string_view ); // 언제나 배열은 포인터로 변한다? const char[] 이런식으로 쓰지마라. string으로

//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

void change(int& a, int& b)
{
    int temp{ a };
    a = b;
    b = temp;
}

int main()
{
    int a{ 1 }, b{ 2 };
    change(a, b);
    cout << a << ", " << b << endl;

    save("save.h");
    save("save.cpp");
    save("STL.cpp");
}

//void save( string_view fileName ) {
//   // fileName을 읽을 파일로 연다.
//   //ifstream in;
//   //cout << sizeof in << endl; // 너 몇바이트 짜리야? ifstream은 272바이트 만큼 차지하네
//   //cout << addressof( in ) << endl; // 넌 어디에 살고 있니?, 얘는 괄호에 넣어야 하네.
//   //cout << typeid( in ).name() << endl; // 네 자료형은 뭐임?
//
//   ifstream in{ fileName.data()}; // 파일 포인터를 유지하게된다. data로 읽기모드로 파일을 열었다.
//   if (not in) { // !보단 not 초보자용 코드가 더 읽기 쉽다.
//      cout << fileName << " - 파일 열기 실패" << endl;
//      exit(0);
//   }
//
//   // 저장할 파일을 덧붙여 쓰기 모드로 연다.
//   ofstream out{ "2024 1학기 STL 월910화78 강의저장.txt", ios::app }; 
//   // output은 존재하지 않으면 새로 만들어서 상관 x
//   // input은 체크를 해야한다.
//
//
//   // 읽을 파일의 내용을 모두 읽어 쓸 파일에 덧붙여 쓴다.
//   // SLT 자료구조와 알고리즘을 이용해본다.
//   
//   // 저장한 시간기록
//   out << endl << endl << endl;
//   
//   auto now = chrono::system_clock::now();            // epoch로 부터 증가한 tick
//   auto time = chrono::system_clock::to_time_t(now);   // UTC 시간으로 변환
//   auto lt = localtime(&time);//포인터를 인자로 넘겨주면 컴파일러가 위험하다 한다. 현지시간으로 변환
//
//   auto old = out.imbue(locale("ko_KR")); // 출력파일의 지역을 한국으로 바꾼다.
//   // 날짜를 내 마음대로 출력한다.
//   out << "==============================================" << endl;
//   out << fileName << put_time(lt, ", 저장시간: %x %A %X ") << endl;
//   out << "==============================================" << endl;
//   out.imbue(old); // 원상복구 윈플때 브러시 쓰고 다시 원상복구 시키는 그런 것. 전세 살다가 나갈떄 원상복구 해야지
//
//   // 좋은 코딩은 아니다 저장을 위한 것.
//   //벡터 v에 코드의 모든 내용이 저장되어 있다.
//   vector<char> v{ istreambuf_iterator<char>{in}, {} };//초기화를 해볼 것이다.
//
//   //for (char c : v)
//   //   out << c; <- 이게더 좋은 코드라고 한다. 저장하는 코드인듯.
//
//   copy(v.begin(), v.end(), ostreambuf_iterator<char>{out}); // 알고리즘을 활용해 더 안좋은 코드지만 저장해봄
//   // 벡터의 시작부터 끝까지 out파일로 저장한다.
//   // 실행할 때마다 덧붙여서 저장된다.
//   
//}

====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 4:59:10 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main()
{
    Dog a{ 1 }, b{ 2 };
    change(a, b);
    cout << a << ", " << b << endl;

    //save("save.h");
    //save("save.cpp");
    save("STL.cpp");
}



====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:05:55 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);

    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:08:52 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:09:09 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:10:15 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:10:28 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:35:45 
====================
#include <random>
#include <iostream>
#include "save.h"
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main()
{
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    cout << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:37:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main()
{
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:49:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    int largest = numeric_limits<int>::min();
    for (int num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:52:47 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    auto pos = max_element(begin(a), end(a));
    cout << "최대값 = " << *pos << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:54:44 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:54:59 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[10000];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:04:32 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    array<int, 100> a;//배열대신 어레이

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:06:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:17:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    std::string_view filename;
    std::ofstream out("int값들.txt", std::ios::app);
    for (int num : a) {
        out << num << endl;
    }
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:19:18 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << endl;
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:25:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:25:30 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:26:13 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:26:29 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:27:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:39:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main(){
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:39:56 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:40:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:40:45 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count=0;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:49:07 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
   
    cout << *max_element(istream_iterator<int>{in}, {}) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 3:35:57 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a{};
    ifstream in("int값들.txt");
    for (int num : a) {
        print("{:8}", num);
    }


    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 3:51:00 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    for (int num : a) {
        print("{:8}", num);
    }


    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:05:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    ofstream out{"int100개를메모리그대로저장.txt"};
    out.write((char*)(a.data()), a.size() * sizeof(int));
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:19:08 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    ofstream out{"int100개를메모리그대로저장.txt",ios::binary};
    out.write((const char*)(a.data()),400);
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:48:52 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};
    ifstream in{ "int100개를메모리그대로저장.txt",(ios::binary) };
    
    in.read((char*)a.data(), 400);
    for (int num : a) {
        cout << num << "\t";
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:49:25 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};
    ifstream in{ "int100개를메모리그대로저장.txt",(ios::binary) };
    
    in.read((char*)a.data(), 400);
    for (int num : a) {
        cout << num << "\t";
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:20 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num<<endl;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:43 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num<<endl;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:58 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:13:56 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{ (char)uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num;
    }
};
//문제 : int 100개를 저장하는데 메모리 bit값을 그대로 저장하자.
//int 100개 = sizeof(int) * 100 = 400 bytes
void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog : dogs) {
        cout << dog << endl;
    }
    ofstream out{ "int100개를그대로저장.txt",(ios::binary) };
    out.write((const char*)(dogs.data()), sizeof(dogs));
    save("STL.cpp");
}


====================
STL_강의저장.txt, 저장시간 : 2024-03-18 월요일 오후 6:53:22 
====================


====================
STL_강의저장.txt, 저장시간 : 2024-03-18 월요일 오후 6:55:37 
====================


====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 3:59:29 
====================
#include <iostream>
#include <string>
#include <string_view>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>

void save(std::string_view filename)
{
	//sudo
	//읽을 파일 열기
	std::ifstream in{ filename.data() };
	if (!in)
	{
		std::cout << "파일을 열 수 없습니다" << std::endl;
		exit(0);
	}
	// 쓸파일을 덮붙이기모드로 연다
	std::ofstream out("STL_강의저장.txt", std::ios::app);
	//저장된 시간을 파일에 기록
	auto now = std::chrono::system_clock::now();
	auto time = std::chrono::system_clock::to_time_t(now);      //utc
	auto lt = std::localtime(&time);                     //현지시간

	auto old = out.imbue(std::locale("ko_KR"));
	out << std::endl << std::endl;
	out << "====================" << std::endl;
	out << filename << std::put_time(lt, ", 저장시간 : %x %A %X ") << std::endl;
	out << "====================" << std::endl;

	out.imbue(old);
	// 읽을파일의 모든 내용을 쓸파일에 쓴다
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}

int main(){
	std::cout << "STL 입니다." << '\n';

	std::cout << sizeof(std::string) << std::endl;

	save("STL.cpp");
}

====================
save.h, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
#pragma once
//---------------------------------------------
// save.h
// 
// 한 학기 강의를 저장하는 함수
//---------------------------------------------
#pragma once

void save(std::string_view);

====================
save.cpp, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
#include <iostream>
#include <string>
#include <string_view>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>

void save(std::string_view filename) {
	//sudo
	//읽을 파일 열기
	std::ifstream in{ filename.data() };
	if (!in)
	{
		std::cout << "파일을 열 수 없습니다" << std::endl;
		exit(0);
	}
	// 쓸파일을 덮붙이기모드로 연다
	std::ofstream out("STL_강의저장.txt", std::ios::app);
	//저장된 시간을 파일에 기록
	auto now = std::chrono::system_clock::now();
	auto time = std::chrono::system_clock::to_time_t(now);      //utc
	auto lt = std::localtime(&time);                     //현지시간

	auto old = out.imbue(std::locale("ko_KR"));
	out << std::endl << std::endl;
	out << "====================" << std::endl;
	out << filename << std::put_time(lt, ", 저장시간 : %x %A %X ") << std::endl;
	out << "====================" << std::endl;

	out.imbue(old);
	// 읽을파일의 모든 내용을 쓸파일에 쓴다
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}


====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

//void save( string_view ); // 언제나 배열은 포인터로 변한다? const char[] 이런식으로 쓰지마라. string으로

//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

void change(int& a, int& b)
{
    int temp{ a };
    a = b;
    b = temp;
}

int main()
{
    int a{ 1 }, b{ 2 };
    change(a, b);
    cout << a << ", " << b << endl;

    save("save.h");
    save("save.cpp");
    save("STL.cpp");
}

//void save( string_view fileName ) {
//   // fileName을 읽을 파일로 연다.
//   //ifstream in;
//   //cout << sizeof in << endl; // 너 몇바이트 짜리야? ifstream은 272바이트 만큼 차지하네
//   //cout << addressof( in ) << endl; // 넌 어디에 살고 있니?, 얘는 괄호에 넣어야 하네.
//   //cout << typeid( in ).name() << endl; // 네 자료형은 뭐임?
//
//   ifstream in{ fileName.data()}; // 파일 포인터를 유지하게된다. data로 읽기모드로 파일을 열었다.
//   if (not in) { // !보단 not 초보자용 코드가 더 읽기 쉽다.
//      cout << fileName << " - 파일 열기 실패" << endl;
//      exit(0);
//   }
//
//   // 저장할 파일을 덧붙여 쓰기 모드로 연다.
//   ofstream out{ "2024 1학기 STL 월910화78 강의저장.txt", ios::app }; 
//   // output은 존재하지 않으면 새로 만들어서 상관 x
//   // input은 체크를 해야한다.
//
//
//   // 읽을 파일의 내용을 모두 읽어 쓸 파일에 덧붙여 쓴다.
//   // SLT 자료구조와 알고리즘을 이용해본다.
//   
//   // 저장한 시간기록
//   out << endl << endl << endl;
//   
//   auto now = chrono::system_clock::now();            // epoch로 부터 증가한 tick
//   auto time = chrono::system_clock::to_time_t(now);   // UTC 시간으로 변환
//   auto lt = localtime(&time);//포인터를 인자로 넘겨주면 컴파일러가 위험하다 한다. 현지시간으로 변환
//
//   auto old = out.imbue(locale("ko_KR")); // 출력파일의 지역을 한국으로 바꾼다.
//   // 날짜를 내 마음대로 출력한다.
//   out << "==============================================" << endl;
//   out << fileName << put_time(lt, ", 저장시간: %x %A %X ") << endl;
//   out << "==============================================" << endl;
//   out.imbue(old); // 원상복구 윈플때 브러시 쓰고 다시 원상복구 시키는 그런 것. 전세 살다가 나갈떄 원상복구 해야지
//
//   // 좋은 코딩은 아니다 저장을 위한 것.
//   //벡터 v에 코드의 모든 내용이 저장되어 있다.
//   vector<char> v{ istreambuf_iterator<char>{in}, {} };//초기화를 해볼 것이다.
//
//   //for (char c : v)
//   //   out << c; <- 이게더 좋은 코드라고 한다. 저장하는 코드인듯.
//
//   copy(v.begin(), v.end(), ostreambuf_iterator<char>{out}); // 알고리즘을 활용해 더 안좋은 코드지만 저장해봄
//   // 벡터의 시작부터 끝까지 out파일로 저장한다.
//   // 실행할 때마다 덧붙여서 저장된다.
//   
//}

====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 4:59:10 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main()
{
    Dog a{ 1 }, b{ 2 };
    change(a, b);
    cout << a << ", " << b << endl;

    //save("save.h");
    //save("save.cpp");
    save("STL.cpp");
}



====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:05:55 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);

    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:08:52 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:09:09 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:10:15 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:10:28 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:35:45 
====================
#include <random>
#include <iostream>
#include "save.h"
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main()
{
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    cout << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:37:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main()
{
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:49:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    int largest = numeric_limits<int>::min();
    for (int num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:52:47 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    auto pos = max_element(begin(a), end(a));
    cout << "최대값 = " << *pos << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:54:44 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:54:59 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[10000];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:04:32 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    array<int, 100> a;//배열대신 어레이

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:06:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:17:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    std::string_view filename;
    std::ofstream out("int값들.txt", std::ios::app);
    for (int num : a) {
        out << num << endl;
    }
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:19:18 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << endl;
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:25:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:25:30 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:26:13 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:26:29 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:27:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:39:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main(){
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:39:56 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:40:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:40:45 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count=0;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:49:07 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
   
    cout << *max_element(istream_iterator<int>{in}, {}) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 3:35:57 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a{};
    ifstream in("int값들.txt");
    for (int num : a) {
        print("{:8}", num);
    }


    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 3:51:00 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    for (int num : a) {
        print("{:8}", num);
    }


    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:05:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    ofstream out{"int100개를메모리그대로저장.txt"};
    out.write((char*)(a.data()), a.size() * sizeof(int));
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:19:08 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    ofstream out{"int100개를메모리그대로저장.txt",ios::binary};
    out.write((const char*)(a.data()),400);
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:48:52 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};
    ifstream in{ "int100개를메모리그대로저장.txt",(ios::binary) };
    
    in.read((char*)a.data(), 400);
    for (int num : a) {
        cout << num << "\t";
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:49:25 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};
    ifstream in{ "int100개를메모리그대로저장.txt",(ios::binary) };
    
    in.read((char*)a.data(), 400);
    for (int num : a) {
        cout << num << "\t";
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:20 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num<<endl;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:43 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num<<endl;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:58 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:13:56 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{ (char)uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num;
    }
};
//문제 : int 100개를 저장하는데 메모리 bit값을 그대로 저장하자.
//int 100개 = sizeof(int) * 100 = 400 bytes
void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog : dogs) {
        cout << dog << endl;
    }
    ofstream out{ "int100개를그대로저장.txt",(ios::binary) };
    out.write((const char*)(dogs.data()), sizeof(dogs));
    save("STL.cpp");
}


====================
STL_강의저장.txt, 저장시간 : 2024-03-18 월요일 오후 6:53:22 
====================


====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 3:59:29 
====================
#include <iostream>
#include <string>
#include <string_view>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>

void save(std::string_view filename)
{
	//sudo
	//읽을 파일 열기
	std::ifstream in{ filename.data() };
	if (!in)
	{
		std::cout << "파일을 열 수 없습니다" << std::endl;
		exit(0);
	}
	// 쓸파일을 덮붙이기모드로 연다
	std::ofstream out("STL_강의저장.txt", std::ios::app);
	//저장된 시간을 파일에 기록
	auto now = std::chrono::system_clock::now();
	auto time = std::chrono::system_clock::to_time_t(now);      //utc
	auto lt = std::localtime(&time);                     //현지시간

	auto old = out.imbue(std::locale("ko_KR"));
	out << std::endl << std::endl;
	out << "====================" << std::endl;
	out << filename << std::put_time(lt, ", 저장시간 : %x %A %X ") << std::endl;
	out << "====================" << std::endl;

	out.imbue(old);
	// 읽을파일의 모든 내용을 쓸파일에 쓴다
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}

int main(){
	std::cout << "STL 입니다." << '\n';

	std::cout << sizeof(std::string) << std::endl;

	save("STL.cpp");
}

====================
save.h, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
#pragma once
//---------------------------------------------
// save.h
// 
// 한 학기 강의를 저장하는 함수
//---------------------------------------------
#pragma once

void save(std::string_view);

====================
save.cpp, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
#include <iostream>
#include <string>
#include <string_view>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>

void save(std::string_view filename) {
	//sudo
	//읽을 파일 열기
	std::ifstream in{ filename.data() };
	if (!in)
	{
		std::cout << "파일을 열 수 없습니다" << std::endl;
		exit(0);
	}
	// 쓸파일을 덮붙이기모드로 연다
	std::ofstream out("STL_강의저장.txt", std::ios::app);
	//저장된 시간을 파일에 기록
	auto now = std::chrono::system_clock::now();
	auto time = std::chrono::system_clock::to_time_t(now);      //utc
	auto lt = std::localtime(&time);                     //현지시간

	auto old = out.imbue(std::locale("ko_KR"));
	out << std::endl << std::endl;
	out << "====================" << std::endl;
	out << filename << std::put_time(lt, ", 저장시간 : %x %A %X ") << std::endl;
	out << "====================" << std::endl;

	out.imbue(old);
	// 읽을파일의 모든 내용을 쓸파일에 쓴다
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}


====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

//void save( string_view ); // 언제나 배열은 포인터로 변한다? const char[] 이런식으로 쓰지마라. string으로

//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

void change(int& a, int& b)
{
    int temp{ a };
    a = b;
    b = temp;
}

int main()
{
    int a{ 1 }, b{ 2 };
    change(a, b);
    cout << a << ", " << b << endl;

    save("save.h");
    save("save.cpp");
    save("STL.cpp");
}

//void save( string_view fileName ) {
//   // fileName을 읽을 파일로 연다.
//   //ifstream in;
//   //cout << sizeof in << endl; // 너 몇바이트 짜리야? ifstream은 272바이트 만큼 차지하네
//   //cout << addressof( in ) << endl; // 넌 어디에 살고 있니?, 얘는 괄호에 넣어야 하네.
//   //cout << typeid( in ).name() << endl; // 네 자료형은 뭐임?
//
//   ifstream in{ fileName.data()}; // 파일 포인터를 유지하게된다. data로 읽기모드로 파일을 열었다.
//   if (not in) { // !보단 not 초보자용 코드가 더 읽기 쉽다.
//      cout << fileName << " - 파일 열기 실패" << endl;
//      exit(0);
//   }
//
//   // 저장할 파일을 덧붙여 쓰기 모드로 연다.
//   ofstream out{ "2024 1학기 STL 월910화78 강의저장.txt", ios::app }; 
//   // output은 존재하지 않으면 새로 만들어서 상관 x
//   // input은 체크를 해야한다.
//
//
//   // 읽을 파일의 내용을 모두 읽어 쓸 파일에 덧붙여 쓴다.
//   // SLT 자료구조와 알고리즘을 이용해본다.
//   
//   // 저장한 시간기록
//   out << endl << endl << endl;
//   
//   auto now = chrono::system_clock::now();            // epoch로 부터 증가한 tick
//   auto time = chrono::system_clock::to_time_t(now);   // UTC 시간으로 변환
//   auto lt = localtime(&time);//포인터를 인자로 넘겨주면 컴파일러가 위험하다 한다. 현지시간으로 변환
//
//   auto old = out.imbue(locale("ko_KR")); // 출력파일의 지역을 한국으로 바꾼다.
//   // 날짜를 내 마음대로 출력한다.
//   out << "==============================================" << endl;
//   out << fileName << put_time(lt, ", 저장시간: %x %A %X ") << endl;
//   out << "==============================================" << endl;
//   out.imbue(old); // 원상복구 윈플때 브러시 쓰고 다시 원상복구 시키는 그런 것. 전세 살다가 나갈떄 원상복구 해야지
//
//   // 좋은 코딩은 아니다 저장을 위한 것.
//   //벡터 v에 코드의 모든 내용이 저장되어 있다.
//   vector<char> v{ istreambuf_iterator<char>{in}, {} };//초기화를 해볼 것이다.
//
//   //for (char c : v)
//   //   out << c; <- 이게더 좋은 코드라고 한다. 저장하는 코드인듯.
//
//   copy(v.begin(), v.end(), ostreambuf_iterator<char>{out}); // 알고리즘을 활용해 더 안좋은 코드지만 저장해봄
//   // 벡터의 시작부터 끝까지 out파일로 저장한다.
//   // 실행할 때마다 덧붙여서 저장된다.
//   
//}

====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 4:59:10 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main()
{
    Dog a{ 1 }, b{ 2 };
    change(a, b);
    cout << a << ", " << b << endl;

    //save("save.h");
    //save("save.cpp");
    save("STL.cpp");
}



====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:05:55 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);

    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:08:52 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:09:09 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:10:15 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:10:28 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:35:45 
====================
#include <random>
#include <iostream>
#include "save.h"
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main()
{
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    cout << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:37:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main()
{
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:49:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    int largest = numeric_limits<int>::min();
    for (int num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:52:47 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    auto pos = max_element(begin(a), end(a));
    cout << "최대값 = " << *pos << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:54:44 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:54:59 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[10000];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:04:32 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    array<int, 100> a;//배열대신 어레이

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:06:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:17:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    std::string_view filename;
    std::ofstream out("int값들.txt", std::ios::app);
    for (int num : a) {
        out << num << endl;
    }
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:19:18 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << endl;
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:25:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:25:30 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:26:13 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:26:29 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:27:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:39:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main(){
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:39:56 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:40:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:40:45 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count=0;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:49:07 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
   
    cout << *max_element(istream_iterator<int>{in}, {}) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 3:35:57 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a{};
    ifstream in("int값들.txt");
    for (int num : a) {
        print("{:8}", num);
    }


    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 3:51:00 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    for (int num : a) {
        print("{:8}", num);
    }


    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:05:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    ofstream out{"int100개를메모리그대로저장.txt"};
    out.write((char*)(a.data()), a.size() * sizeof(int));
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:19:08 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    ofstream out{"int100개를메모리그대로저장.txt",ios::binary};
    out.write((const char*)(a.data()),400);
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:48:52 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};
    ifstream in{ "int100개를메모리그대로저장.txt",(ios::binary) };
    
    in.read((char*)a.data(), 400);
    for (int num : a) {
        cout << num << "\t";
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:49:25 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};
    ifstream in{ "int100개를메모리그대로저장.txt",(ios::binary) };
    
    in.read((char*)a.data(), 400);
    for (int num : a) {
        cout << num << "\t";
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:20 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num<<endl;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:43 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num<<endl;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:58 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:13:56 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{ (char)uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num;
    }
};
//문제 : int 100개를 저장하는데 메모리 bit값을 그대로 저장하자.
//int 100개 = sizeof(int) * 100 = 400 bytes
void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog : dogs) {
        cout << dog << endl;
    }
    ofstream out{ "int100개를그대로저장.txt",(ios::binary) };
    out.write((const char*)(dogs.data()), sizeof(dogs));
    save("STL.cpp");
}


====================
STL_강의저장.txt, 저장시간 : 2024-03-18 월요일 오후 6:53:22 
====================


====================
STL_강의저장.txt, 저장시간 : 2024-03-18 월요일 오후 6:55:37 
====================


====================
STL_강의저장.txt, 저장시간 : 2024-03-18 월요일 오후 6:56:25 
====================


====================
STL_강의저장.txt, 저장시간 : 2024-03-18 월요일 오후 6:56:46 
====================


====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 3:59:29 
====================
#include <iostream>
#include <string>
#include <string_view>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>

void save(std::string_view filename)
{
	//sudo
	//읽을 파일 열기
	std::ifstream in{ filename.data() };
	if (!in)
	{
		std::cout << "파일을 열 수 없습니다" << std::endl;
		exit(0);
	}
	// 쓸파일을 덮붙이기모드로 연다
	std::ofstream out("STL_강의저장.txt", std::ios::app);
	//저장된 시간을 파일에 기록
	auto now = std::chrono::system_clock::now();
	auto time = std::chrono::system_clock::to_time_t(now);      //utc
	auto lt = std::localtime(&time);                     //현지시간

	auto old = out.imbue(std::locale("ko_KR"));
	out << std::endl << std::endl;
	out << "====================" << std::endl;
	out << filename << std::put_time(lt, ", 저장시간 : %x %A %X ") << std::endl;
	out << "====================" << std::endl;

	out.imbue(old);
	// 읽을파일의 모든 내용을 쓸파일에 쓴다
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}

int main(){
	std::cout << "STL 입니다." << '\n';

	std::cout << sizeof(std::string) << std::endl;

	save("STL.cpp");
}

====================
save.h, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
#pragma once
//---------------------------------------------
// save.h
// 
// 한 학기 강의를 저장하는 함수
//---------------------------------------------
#pragma once

void save(std::string_view);

====================
save.cpp, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
#include <iostream>
#include <string>
#include <string_view>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>

void save(std::string_view filename) {
	//sudo
	//읽을 파일 열기
	std::ifstream in{ filename.data() };
	if (!in)
	{
		std::cout << "파일을 열 수 없습니다" << std::endl;
		exit(0);
	}
	// 쓸파일을 덮붙이기모드로 연다
	std::ofstream out("STL_강의저장.txt", std::ios::app);
	//저장된 시간을 파일에 기록
	auto now = std::chrono::system_clock::now();
	auto time = std::chrono::system_clock::to_time_t(now);      //utc
	auto lt = std::localtime(&time);                     //현지시간

	auto old = out.imbue(std::locale("ko_KR"));
	out << std::endl << std::endl;
	out << "====================" << std::endl;
	out << filename << std::put_time(lt, ", 저장시간 : %x %A %X ") << std::endl;
	out << "====================" << std::endl;

	out.imbue(old);
	// 읽을파일의 모든 내용을 쓸파일에 쓴다
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}


====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

//void save( string_view ); // 언제나 배열은 포인터로 변한다? const char[] 이런식으로 쓰지마라. string으로

//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

void change(int& a, int& b)
{
    int temp{ a };
    a = b;
    b = temp;
}

int main()
{
    int a{ 1 }, b{ 2 };
    change(a, b);
    cout << a << ", " << b << endl;

    save("save.h");
    save("save.cpp");
    save("STL.cpp");
}

//void save( string_view fileName ) {
//   // fileName을 읽을 파일로 연다.
//   //ifstream in;
//   //cout << sizeof in << endl; // 너 몇바이트 짜리야? ifstream은 272바이트 만큼 차지하네
//   //cout << addressof( in ) << endl; // 넌 어디에 살고 있니?, 얘는 괄호에 넣어야 하네.
//   //cout << typeid( in ).name() << endl; // 네 자료형은 뭐임?
//
//   ifstream in{ fileName.data()}; // 파일 포인터를 유지하게된다. data로 읽기모드로 파일을 열었다.
//   if (not in) { // !보단 not 초보자용 코드가 더 읽기 쉽다.
//      cout << fileName << " - 파일 열기 실패" << endl;
//      exit(0);
//   }
//
//   // 저장할 파일을 덧붙여 쓰기 모드로 연다.
//   ofstream out{ "2024 1학기 STL 월910화78 강의저장.txt", ios::app }; 
//   // output은 존재하지 않으면 새로 만들어서 상관 x
//   // input은 체크를 해야한다.
//
//
//   // 읽을 파일의 내용을 모두 읽어 쓸 파일에 덧붙여 쓴다.
//   // SLT 자료구조와 알고리즘을 이용해본다.
//   
//   // 저장한 시간기록
//   out << endl << endl << endl;
//   
//   auto now = chrono::system_clock::now();            // epoch로 부터 증가한 tick
//   auto time = chrono::system_clock::to_time_t(now);   // UTC 시간으로 변환
//   auto lt = localtime(&time);//포인터를 인자로 넘겨주면 컴파일러가 위험하다 한다. 현지시간으로 변환
//
//   auto old = out.imbue(locale("ko_KR")); // 출력파일의 지역을 한국으로 바꾼다.
//   // 날짜를 내 마음대로 출력한다.
//   out << "==============================================" << endl;
//   out << fileName << put_time(lt, ", 저장시간: %x %A %X ") << endl;
//   out << "==============================================" << endl;
//   out.imbue(old); // 원상복구 윈플때 브러시 쓰고 다시 원상복구 시키는 그런 것. 전세 살다가 나갈떄 원상복구 해야지
//
//   // 좋은 코딩은 아니다 저장을 위한 것.
//   //벡터 v에 코드의 모든 내용이 저장되어 있다.
//   vector<char> v{ istreambuf_iterator<char>{in}, {} };//초기화를 해볼 것이다.
//
//   //for (char c : v)
//   //   out << c; <- 이게더 좋은 코드라고 한다. 저장하는 코드인듯.
//
//   copy(v.begin(), v.end(), ostreambuf_iterator<char>{out}); // 알고리즘을 활용해 더 안좋은 코드지만 저장해봄
//   // 벡터의 시작부터 끝까지 out파일로 저장한다.
//   // 실행할 때마다 덧붙여서 저장된다.
//   
//}

====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 4:59:10 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main()
{
    Dog a{ 1 }, b{ 2 };
    change(a, b);
    cout << a << ", " << b << endl;

    //save("save.h");
    //save("save.cpp");
    save("STL.cpp");
}



====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:05:55 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);

    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:08:52 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:09:09 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:10:15 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:10:28 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:35:45 
====================
#include <random>
#include <iostream>
#include "save.h"
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main()
{
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    cout << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:37:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main()
{
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:49:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    int largest = numeric_limits<int>::min();
    for (int num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:52:47 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    auto pos = max_element(begin(a), end(a));
    cout << "최대값 = " << *pos << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:54:44 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:54:59 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[10000];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:04:32 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    array<int, 100> a;//배열대신 어레이

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:06:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:17:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    std::string_view filename;
    std::ofstream out("int값들.txt", std::ios::app);
    for (int num : a) {
        out << num << endl;
    }
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:19:18 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << endl;
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:25:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:25:30 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:26:13 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:26:29 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:27:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:39:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main(){
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:39:56 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:40:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:40:45 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count=0;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:49:07 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
   
    cout << *max_element(istream_iterator<int>{in}, {}) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 3:35:57 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a{};
    ifstream in("int값들.txt");
    for (int num : a) {
        print("{:8}", num);
    }


    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 3:51:00 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    for (int num : a) {
        print("{:8}", num);
    }


    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:05:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    ofstream out{"int100개를메모리그대로저장.txt"};
    out.write((char*)(a.data()), a.size() * sizeof(int));
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:19:08 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    ofstream out{"int100개를메모리그대로저장.txt",ios::binary};
    out.write((const char*)(a.data()),400);
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:48:52 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};
    ifstream in{ "int100개를메모리그대로저장.txt",(ios::binary) };
    
    in.read((char*)a.data(), 400);
    for (int num : a) {
        cout << num << "\t";
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:49:25 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};
    ifstream in{ "int100개를메모리그대로저장.txt",(ios::binary) };
    
    in.read((char*)a.data(), 400);
    for (int num : a) {
        cout << num << "\t";
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:20 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num<<endl;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:43 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num<<endl;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:58 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:13:56 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{ (char)uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num;
    }
};
//문제 : int 100개를 저장하는데 메모리 bit값을 그대로 저장하자.
//int 100개 = sizeof(int) * 100 = 400 bytes
void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog : dogs) {
        cout << dog << endl;
    }
    ofstream out{ "int100개를그대로저장.txt",(ios::binary) };
    out.write((const char*)(dogs.data()), sizeof(dogs));
    save("STL.cpp");
}


====================
STL_강의저장.txt, 저장시간 : 2024-03-18 월요일 오후 6:53:22 
====================


====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 3:59:29 
====================
#include <iostream>
#include <string>
#include <string_view>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>

void save(std::string_view filename)
{
	//sudo
	//읽을 파일 열기
	std::ifstream in{ filename.data() };
	if (!in)
	{
		std::cout << "파일을 열 수 없습니다" << std::endl;
		exit(0);
	}
	// 쓸파일을 덮붙이기모드로 연다
	std::ofstream out("STL_강의저장.txt", std::ios::app);
	//저장된 시간을 파일에 기록
	auto now = std::chrono::system_clock::now();
	auto time = std::chrono::system_clock::to_time_t(now);      //utc
	auto lt = std::localtime(&time);                     //현지시간

	auto old = out.imbue(std::locale("ko_KR"));
	out << std::endl << std::endl;
	out << "====================" << std::endl;
	out << filename << std::put_time(lt, ", 저장시간 : %x %A %X ") << std::endl;
	out << "====================" << std::endl;

	out.imbue(old);
	// 읽을파일의 모든 내용을 쓸파일에 쓴다
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}

int main(){
	std::cout << "STL 입니다." << '\n';

	std::cout << sizeof(std::string) << std::endl;

	save("STL.cpp");
}

====================
save.h, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
#pragma once
//---------------------------------------------
// save.h
// 
// 한 학기 강의를 저장하는 함수
//---------------------------------------------
#pragma once

void save(std::string_view);

====================
save.cpp, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
#include <iostream>
#include <string>
#include <string_view>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>

void save(std::string_view filename) {
	//sudo
	//읽을 파일 열기
	std::ifstream in{ filename.data() };
	if (!in)
	{
		std::cout << "파일을 열 수 없습니다" << std::endl;
		exit(0);
	}
	// 쓸파일을 덮붙이기모드로 연다
	std::ofstream out("STL_강의저장.txt", std::ios::app);
	//저장된 시간을 파일에 기록
	auto now = std::chrono::system_clock::now();
	auto time = std::chrono::system_clock::to_time_t(now);      //utc
	auto lt = std::localtime(&time);                     //현지시간

	auto old = out.imbue(std::locale("ko_KR"));
	out << std::endl << std::endl;
	out << "====================" << std::endl;
	out << filename << std::put_time(lt, ", 저장시간 : %x %A %X ") << std::endl;
	out << "====================" << std::endl;

	out.imbue(old);
	// 읽을파일의 모든 내용을 쓸파일에 쓴다
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}


====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

//void save( string_view ); // 언제나 배열은 포인터로 변한다? const char[] 이런식으로 쓰지마라. string으로

//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

void change(int& a, int& b)
{
    int temp{ a };
    a = b;
    b = temp;
}

int main()
{
    int a{ 1 }, b{ 2 };
    change(a, b);
    cout << a << ", " << b << endl;

    save("save.h");
    save("save.cpp");
    save("STL.cpp");
}

//void save( string_view fileName ) {
//   // fileName을 읽을 파일로 연다.
//   //ifstream in;
//   //cout << sizeof in << endl; // 너 몇바이트 짜리야? ifstream은 272바이트 만큼 차지하네
//   //cout << addressof( in ) << endl; // 넌 어디에 살고 있니?, 얘는 괄호에 넣어야 하네.
//   //cout << typeid( in ).name() << endl; // 네 자료형은 뭐임?
//
//   ifstream in{ fileName.data()}; // 파일 포인터를 유지하게된다. data로 읽기모드로 파일을 열었다.
//   if (not in) { // !보단 not 초보자용 코드가 더 읽기 쉽다.
//      cout << fileName << " - 파일 열기 실패" << endl;
//      exit(0);
//   }
//
//   // 저장할 파일을 덧붙여 쓰기 모드로 연다.
//   ofstream out{ "2024 1학기 STL 월910화78 강의저장.txt", ios::app }; 
//   // output은 존재하지 않으면 새로 만들어서 상관 x
//   // input은 체크를 해야한다.
//
//
//   // 읽을 파일의 내용을 모두 읽어 쓸 파일에 덧붙여 쓴다.
//   // SLT 자료구조와 알고리즘을 이용해본다.
//   
//   // 저장한 시간기록
//   out << endl << endl << endl;
//   
//   auto now = chrono::system_clock::now();            // epoch로 부터 증가한 tick
//   auto time = chrono::system_clock::to_time_t(now);   // UTC 시간으로 변환
//   auto lt = localtime(&time);//포인터를 인자로 넘겨주면 컴파일러가 위험하다 한다. 현지시간으로 변환
//
//   auto old = out.imbue(locale("ko_KR")); // 출력파일의 지역을 한국으로 바꾼다.
//   // 날짜를 내 마음대로 출력한다.
//   out << "==============================================" << endl;
//   out << fileName << put_time(lt, ", 저장시간: %x %A %X ") << endl;
//   out << "==============================================" << endl;
//   out.imbue(old); // 원상복구 윈플때 브러시 쓰고 다시 원상복구 시키는 그런 것. 전세 살다가 나갈떄 원상복구 해야지
//
//   // 좋은 코딩은 아니다 저장을 위한 것.
//   //벡터 v에 코드의 모든 내용이 저장되어 있다.
//   vector<char> v{ istreambuf_iterator<char>{in}, {} };//초기화를 해볼 것이다.
//
//   //for (char c : v)
//   //   out << c; <- 이게더 좋은 코드라고 한다. 저장하는 코드인듯.
//
//   copy(v.begin(), v.end(), ostreambuf_iterator<char>{out}); // 알고리즘을 활용해 더 안좋은 코드지만 저장해봄
//   // 벡터의 시작부터 끝까지 out파일로 저장한다.
//   // 실행할 때마다 덧붙여서 저장된다.
//   
//}

====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 4:59:10 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main()
{
    Dog a{ 1 }, b{ 2 };
    change(a, b);
    cout << a << ", " << b << endl;

    //save("save.h");
    //save("save.cpp");
    save("STL.cpp");
}



====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:05:55 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);

    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:08:52 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:09:09 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:10:15 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:10:28 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:35:45 
====================
#include <random>
#include <iostream>
#include "save.h"
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main()
{
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    cout << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:37:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main()
{
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:49:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    int largest = numeric_limits<int>::min();
    for (int num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:52:47 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    auto pos = max_element(begin(a), end(a));
    cout << "최대값 = " << *pos << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:54:44 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:54:59 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[10000];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:04:32 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    array<int, 100> a;//배열대신 어레이

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:06:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:17:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    std::string_view filename;
    std::ofstream out("int값들.txt", std::ios::app);
    for (int num : a) {
        out << num << endl;
    }
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:19:18 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << endl;
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:25:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:25:30 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:26:13 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:26:29 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:27:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:39:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main(){
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:39:56 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:40:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:40:45 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count=0;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:49:07 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
   
    cout << *max_element(istream_iterator<int>{in}, {}) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 3:35:57 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a{};
    ifstream in("int값들.txt");
    for (int num : a) {
        print("{:8}", num);
    }


    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 3:51:00 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    for (int num : a) {
        print("{:8}", num);
    }


    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:05:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    ofstream out{"int100개를메모리그대로저장.txt"};
    out.write((char*)(a.data()), a.size() * sizeof(int));
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:19:08 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    ofstream out{"int100개를메모리그대로저장.txt",ios::binary};
    out.write((const char*)(a.data()),400);
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:48:52 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};
    ifstream in{ "int100개를메모리그대로저장.txt",(ios::binary) };
    
    in.read((char*)a.data(), 400);
    for (int num : a) {
        cout << num << "\t";
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:49:25 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};
    ifstream in{ "int100개를메모리그대로저장.txt",(ios::binary) };
    
    in.read((char*)a.data(), 400);
    for (int num : a) {
        cout << num << "\t";
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:20 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num<<endl;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:43 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num<<endl;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:58 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:13:56 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{ (char)uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num;
    }
};
//문제 : int 100개를 저장하는데 메모리 bit값을 그대로 저장하자.
//int 100개 = sizeof(int) * 100 = 400 bytes
void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog : dogs) {
        cout << dog << endl;
    }
    ofstream out{ "int100개를그대로저장.txt",(ios::binary) };
    out.write((const char*)(dogs.data()), sizeof(dogs));
    save("STL.cpp");
}


====================
STL_강의저장.txt, 저장시간 : 2024-03-18 월요일 오후 6:53:22 
====================


====================
STL_강의저장.txt, 저장시간 : 2024-03-18 월요일 오후 6:55:37 
====================


====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 3:59:29 
====================
#include <iostream>
#include <string>
#include <string_view>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>

void save(std::string_view filename)
{
	//sudo
	//읽을 파일 열기
	std::ifstream in{ filename.data() };
	if (!in)
	{
		std::cout << "파일을 열 수 없습니다" << std::endl;
		exit(0);
	}
	// 쓸파일을 덮붙이기모드로 연다
	std::ofstream out("STL_강의저장.txt", std::ios::app);
	//저장된 시간을 파일에 기록
	auto now = std::chrono::system_clock::now();
	auto time = std::chrono::system_clock::to_time_t(now);      //utc
	auto lt = std::localtime(&time);                     //현지시간

	auto old = out.imbue(std::locale("ko_KR"));
	out << std::endl << std::endl;
	out << "====================" << std::endl;
	out << filename << std::put_time(lt, ", 저장시간 : %x %A %X ") << std::endl;
	out << "====================" << std::endl;

	out.imbue(old);
	// 읽을파일의 모든 내용을 쓸파일에 쓴다
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}

int main(){
	std::cout << "STL 입니다." << '\n';

	std::cout << sizeof(std::string) << std::endl;

	save("STL.cpp");
}

====================
save.h, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
#pragma once
//---------------------------------------------
// save.h
// 
// 한 학기 강의를 저장하는 함수
//---------------------------------------------
#pragma once

void save(std::string_view);

====================
save.cpp, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
#include <iostream>
#include <string>
#include <string_view>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>

void save(std::string_view filename) {
	//sudo
	//읽을 파일 열기
	std::ifstream in{ filename.data() };
	if (!in)
	{
		std::cout << "파일을 열 수 없습니다" << std::endl;
		exit(0);
	}
	// 쓸파일을 덮붙이기모드로 연다
	std::ofstream out("STL_강의저장.txt", std::ios::app);
	//저장된 시간을 파일에 기록
	auto now = std::chrono::system_clock::now();
	auto time = std::chrono::system_clock::to_time_t(now);      //utc
	auto lt = std::localtime(&time);                     //현지시간

	auto old = out.imbue(std::locale("ko_KR"));
	out << std::endl << std::endl;
	out << "====================" << std::endl;
	out << filename << std::put_time(lt, ", 저장시간 : %x %A %X ") << std::endl;
	out << "====================" << std::endl;

	out.imbue(old);
	// 읽을파일의 모든 내용을 쓸파일에 쓴다
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}


====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

//void save( string_view ); // 언제나 배열은 포인터로 변한다? const char[] 이런식으로 쓰지마라. string으로

//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

void change(int& a, int& b)
{
    int temp{ a };
    a = b;
    b = temp;
}

int main()
{
    int a{ 1 }, b{ 2 };
    change(a, b);
    cout << a << ", " << b << endl;

    save("save.h");
    save("save.cpp");
    save("STL.cpp");
}

//void save( string_view fileName ) {
//   // fileName을 읽을 파일로 연다.
//   //ifstream in;
//   //cout << sizeof in << endl; // 너 몇바이트 짜리야? ifstream은 272바이트 만큼 차지하네
//   //cout << addressof( in ) << endl; // 넌 어디에 살고 있니?, 얘는 괄호에 넣어야 하네.
//   //cout << typeid( in ).name() << endl; // 네 자료형은 뭐임?
//
//   ifstream in{ fileName.data()}; // 파일 포인터를 유지하게된다. data로 읽기모드로 파일을 열었다.
//   if (not in) { // !보단 not 초보자용 코드가 더 읽기 쉽다.
//      cout << fileName << " - 파일 열기 실패" << endl;
//      exit(0);
//   }
//
//   // 저장할 파일을 덧붙여 쓰기 모드로 연다.
//   ofstream out{ "2024 1학기 STL 월910화78 강의저장.txt", ios::app }; 
//   // output은 존재하지 않으면 새로 만들어서 상관 x
//   // input은 체크를 해야한다.
//
//
//   // 읽을 파일의 내용을 모두 읽어 쓸 파일에 덧붙여 쓴다.
//   // SLT 자료구조와 알고리즘을 이용해본다.
//   
//   // 저장한 시간기록
//   out << endl << endl << endl;
//   
//   auto now = chrono::system_clock::now();            // epoch로 부터 증가한 tick
//   auto time = chrono::system_clock::to_time_t(now);   // UTC 시간으로 변환
//   auto lt = localtime(&time);//포인터를 인자로 넘겨주면 컴파일러가 위험하다 한다. 현지시간으로 변환
//
//   auto old = out.imbue(locale("ko_KR")); // 출력파일의 지역을 한국으로 바꾼다.
//   // 날짜를 내 마음대로 출력한다.
//   out << "==============================================" << endl;
//   out << fileName << put_time(lt, ", 저장시간: %x %A %X ") << endl;
//   out << "==============================================" << endl;
//   out.imbue(old); // 원상복구 윈플때 브러시 쓰고 다시 원상복구 시키는 그런 것. 전세 살다가 나갈떄 원상복구 해야지
//
//   // 좋은 코딩은 아니다 저장을 위한 것.
//   //벡터 v에 코드의 모든 내용이 저장되어 있다.
//   vector<char> v{ istreambuf_iterator<char>{in}, {} };//초기화를 해볼 것이다.
//
//   //for (char c : v)
//   //   out << c; <- 이게더 좋은 코드라고 한다. 저장하는 코드인듯.
//
//   copy(v.begin(), v.end(), ostreambuf_iterator<char>{out}); // 알고리즘을 활용해 더 안좋은 코드지만 저장해봄
//   // 벡터의 시작부터 끝까지 out파일로 저장한다.
//   // 실행할 때마다 덧붙여서 저장된다.
//   
//}

====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 4:59:10 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main()
{
    Dog a{ 1 }, b{ 2 };
    change(a, b);
    cout << a << ", " << b << endl;

    //save("save.h");
    //save("save.cpp");
    save("STL.cpp");
}



====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:05:55 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);

    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:08:52 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:09:09 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:10:15 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:10:28 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:35:45 
====================
#include <random>
#include <iostream>
#include "save.h"
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main()
{
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    cout << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:37:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main()
{
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:49:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    int largest = numeric_limits<int>::min();
    for (int num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:52:47 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    auto pos = max_element(begin(a), end(a));
    cout << "최대값 = " << *pos << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:54:44 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:54:59 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[10000];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:04:32 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    array<int, 100> a;//배열대신 어레이

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:06:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:17:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    std::string_view filename;
    std::ofstream out("int값들.txt", std::ios::app);
    for (int num : a) {
        out << num << endl;
    }
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:19:18 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << endl;
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:25:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:25:30 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:26:13 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:26:29 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:27:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:39:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main(){
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:39:56 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:40:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:40:45 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count=0;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:49:07 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
   
    cout << *max_element(istream_iterator<int>{in}, {}) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 3:35:57 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a{};
    ifstream in("int값들.txt");
    for (int num : a) {
        print("{:8}", num);
    }


    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 3:51:00 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    for (int num : a) {
        print("{:8}", num);
    }


    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:05:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    ofstream out{"int100개를메모리그대로저장.txt"};
    out.write((char*)(a.data()), a.size() * sizeof(int));
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:19:08 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    ofstream out{"int100개를메모리그대로저장.txt",ios::binary};
    out.write((const char*)(a.data()),400);
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:48:52 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};
    ifstream in{ "int100개를메모리그대로저장.txt",(ios::binary) };
    
    in.read((char*)a.data(), 400);
    for (int num : a) {
        cout << num << "\t";
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:49:25 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};
    ifstream in{ "int100개를메모리그대로저장.txt",(ios::binary) };
    
    in.read((char*)a.data(), 400);
    for (int num : a) {
        cout << num << "\t";
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:20 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num<<endl;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:43 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num<<endl;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:58 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:13:56 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{ (char)uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num;
    }
};
//문제 : int 100개를 저장하는데 메모리 bit값을 그대로 저장하자.
//int 100개 = sizeof(int) * 100 = 400 bytes
void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog : dogs) {
        cout << dog << endl;
    }
    ofstream out{ "int100개를그대로저장.txt",(ios::binary) };
    out.write((const char*)(dogs.data()), sizeof(dogs));
    save("STL.cpp");
}


====================
STL_강의저장.txt, 저장시간 : 2024-03-18 월요일 오후 6:53:22 
====================


====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 3:59:29 
====================
#include <iostream>
#include <string>
#include <string_view>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>

void save(std::string_view filename)
{
	//sudo
	//읽을 파일 열기
	std::ifstream in{ filename.data() };
	if (!in)
	{
		std::cout << "파일을 열 수 없습니다" << std::endl;
		exit(0);
	}
	// 쓸파일을 덮붙이기모드로 연다
	std::ofstream out("STL_강의저장.txt", std::ios::app);
	//저장된 시간을 파일에 기록
	auto now = std::chrono::system_clock::now();
	auto time = std::chrono::system_clock::to_time_t(now);      //utc
	auto lt = std::localtime(&time);                     //현지시간

	auto old = out.imbue(std::locale("ko_KR"));
	out << std::endl << std::endl;
	out << "====================" << std::endl;
	out << filename << std::put_time(lt, ", 저장시간 : %x %A %X ") << std::endl;
	out << "====================" << std::endl;

	out.imbue(old);
	// 읽을파일의 모든 내용을 쓸파일에 쓴다
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}

int main(){
	std::cout << "STL 입니다." << '\n';

	std::cout << sizeof(std::string) << std::endl;

	save("STL.cpp");
}

====================
save.h, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
#pragma once
//---------------------------------------------
// save.h
// 
// 한 학기 강의를 저장하는 함수
//---------------------------------------------
#pragma once

void save(std::string_view);

====================
save.cpp, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
#include <iostream>
#include <string>
#include <string_view>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>

void save(std::string_view filename) {
	//sudo
	//읽을 파일 열기
	std::ifstream in{ filename.data() };
	if (!in)
	{
		std::cout << "파일을 열 수 없습니다" << std::endl;
		exit(0);
	}
	// 쓸파일을 덮붙이기모드로 연다
	std::ofstream out("STL_강의저장.txt", std::ios::app);
	//저장된 시간을 파일에 기록
	auto now = std::chrono::system_clock::now();
	auto time = std::chrono::system_clock::to_time_t(now);      //utc
	auto lt = std::localtime(&time);                     //현지시간

	auto old = out.imbue(std::locale("ko_KR"));
	out << std::endl << std::endl;
	out << "====================" << std::endl;
	out << filename << std::put_time(lt, ", 저장시간 : %x %A %X ") << std::endl;
	out << "====================" << std::endl;

	out.imbue(old);
	// 읽을파일의 모든 내용을 쓸파일에 쓴다
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}


====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

//void save( string_view ); // 언제나 배열은 포인터로 변한다? const char[] 이런식으로 쓰지마라. string으로

//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

void change(int& a, int& b)
{
    int temp{ a };
    a = b;
    b = temp;
}

int main()
{
    int a{ 1 }, b{ 2 };
    change(a, b);
    cout << a << ", " << b << endl;

    save("save.h");
    save("save.cpp");
    save("STL.cpp");
}

//void save( string_view fileName ) {
//   // fileName을 읽을 파일로 연다.
//   //ifstream in;
//   //cout << sizeof in << endl; // 너 몇바이트 짜리야? ifstream은 272바이트 만큼 차지하네
//   //cout << addressof( in ) << endl; // 넌 어디에 살고 있니?, 얘는 괄호에 넣어야 하네.
//   //cout << typeid( in ).name() << endl; // 네 자료형은 뭐임?
//
//   ifstream in{ fileName.data()}; // 파일 포인터를 유지하게된다. data로 읽기모드로 파일을 열었다.
//   if (not in) { // !보단 not 초보자용 코드가 더 읽기 쉽다.
//      cout << fileName << " - 파일 열기 실패" << endl;
//      exit(0);
//   }
//
//   // 저장할 파일을 덧붙여 쓰기 모드로 연다.
//   ofstream out{ "2024 1학기 STL 월910화78 강의저장.txt", ios::app }; 
//   // output은 존재하지 않으면 새로 만들어서 상관 x
//   // input은 체크를 해야한다.
//
//
//   // 읽을 파일의 내용을 모두 읽어 쓸 파일에 덧붙여 쓴다.
//   // SLT 자료구조와 알고리즘을 이용해본다.
//   
//   // 저장한 시간기록
//   out << endl << endl << endl;
//   
//   auto now = chrono::system_clock::now();            // epoch로 부터 증가한 tick
//   auto time = chrono::system_clock::to_time_t(now);   // UTC 시간으로 변환
//   auto lt = localtime(&time);//포인터를 인자로 넘겨주면 컴파일러가 위험하다 한다. 현지시간으로 변환
//
//   auto old = out.imbue(locale("ko_KR")); // 출력파일의 지역을 한국으로 바꾼다.
//   // 날짜를 내 마음대로 출력한다.
//   out << "==============================================" << endl;
//   out << fileName << put_time(lt, ", 저장시간: %x %A %X ") << endl;
//   out << "==============================================" << endl;
//   out.imbue(old); // 원상복구 윈플때 브러시 쓰고 다시 원상복구 시키는 그런 것. 전세 살다가 나갈떄 원상복구 해야지
//
//   // 좋은 코딩은 아니다 저장을 위한 것.
//   //벡터 v에 코드의 모든 내용이 저장되어 있다.
//   vector<char> v{ istreambuf_iterator<char>{in}, {} };//초기화를 해볼 것이다.
//
//   //for (char c : v)
//   //   out << c; <- 이게더 좋은 코드라고 한다. 저장하는 코드인듯.
//
//   copy(v.begin(), v.end(), ostreambuf_iterator<char>{out}); // 알고리즘을 활용해 더 안좋은 코드지만 저장해봄
//   // 벡터의 시작부터 끝까지 out파일로 저장한다.
//   // 실행할 때마다 덧붙여서 저장된다.
//   
//}

====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 4:59:10 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main()
{
    Dog a{ 1 }, b{ 2 };
    change(a, b);
    cout << a << ", " << b << endl;

    //save("save.h");
    //save("save.cpp");
    save("STL.cpp");
}



====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:05:55 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);

    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:08:52 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:09:09 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:10:15 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:10:28 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:35:45 
====================
#include <random>
#include <iostream>
#include "save.h"
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main()
{
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    cout << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:37:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main()
{
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:49:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    int largest = numeric_limits<int>::min();
    for (int num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:52:47 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    auto pos = max_element(begin(a), end(a));
    cout << "최대값 = " << *pos << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:54:44 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:54:59 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[10000];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:04:32 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    array<int, 100> a;//배열대신 어레이

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:06:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:17:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    std::string_view filename;
    std::ofstream out("int값들.txt", std::ios::app);
    for (int num : a) {
        out << num << endl;
    }
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:19:18 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << endl;
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:25:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:25:30 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:26:13 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:26:29 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:27:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:39:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main(){
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:39:56 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:40:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:40:45 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count=0;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:49:07 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
   
    cout << *max_element(istream_iterator<int>{in}, {}) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 3:35:57 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a{};
    ifstream in("int값들.txt");
    for (int num : a) {
        print("{:8}", num);
    }


    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 3:51:00 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    for (int num : a) {
        print("{:8}", num);
    }


    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:05:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    ofstream out{"int100개를메모리그대로저장.txt"};
    out.write((char*)(a.data()), a.size() * sizeof(int));
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:19:08 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    ofstream out{"int100개를메모리그대로저장.txt",ios::binary};
    out.write((const char*)(a.data()),400);
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:48:52 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};
    ifstream in{ "int100개를메모리그대로저장.txt",(ios::binary) };
    
    in.read((char*)a.data(), 400);
    for (int num : a) {
        cout << num << "\t";
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:49:25 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};
    ifstream in{ "int100개를메모리그대로저장.txt",(ios::binary) };
    
    in.read((char*)a.data(), 400);
    for (int num : a) {
        cout << num << "\t";
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:20 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num<<endl;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:43 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num<<endl;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:58 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:13:56 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{ (char)uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num;
    }
};
//문제 : int 100개를 저장하는데 메모리 bit값을 그대로 저장하자.
//int 100개 = sizeof(int) * 100 = 400 bytes
void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog : dogs) {
        cout << dog << endl;
    }
    ofstream out{ "int100개를그대로저장.txt",(ios::binary) };
    out.write((const char*)(dogs.data()), sizeof(dogs));
    save("STL.cpp");
}


====================
STL_강의저장.txt, 저장시간 : 2024-03-18 월요일 오후 6:53:22 
====================


====================
STL_강의저장.txt, 저장시간 : 2024-03-18 월요일 오후 6:55:37 
====================


====================
STL_강의저장.txt, 저장시간 : 2024-03-18 월요일 오후 6:56:25 
====================


====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 3:59:29 
====================
#include <iostream>
#include <string>
#include <string_view>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>

void save(std::string_view filename)
{
	//sudo
	//읽을 파일 열기
	std::ifstream in{ filename.data() };
	if (!in)
	{
		std::cout << "파일을 열 수 없습니다" << std::endl;
		exit(0);
	}
	// 쓸파일을 덮붙이기모드로 연다
	std::ofstream out("STL_강의저장.txt", std::ios::app);
	//저장된 시간을 파일에 기록
	auto now = std::chrono::system_clock::now();
	auto time = std::chrono::system_clock::to_time_t(now);      //utc
	auto lt = std::localtime(&time);                     //현지시간

	auto old = out.imbue(std::locale("ko_KR"));
	out << std::endl << std::endl;
	out << "====================" << std::endl;
	out << filename << std::put_time(lt, ", 저장시간 : %x %A %X ") << std::endl;
	out << "====================" << std::endl;

	out.imbue(old);
	// 읽을파일의 모든 내용을 쓸파일에 쓴다
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}

int main(){
	std::cout << "STL 입니다." << '\n';

	std::cout << sizeof(std::string) << std::endl;

	save("STL.cpp");
}

====================
save.h, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
#pragma once
//---------------------------------------------
// save.h
// 
// 한 학기 강의를 저장하는 함수
//---------------------------------------------
#pragma once

void save(std::string_view);

====================
save.cpp, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
#include <iostream>
#include <string>
#include <string_view>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>

void save(std::string_view filename) {
	//sudo
	//읽을 파일 열기
	std::ifstream in{ filename.data() };
	if (!in)
	{
		std::cout << "파일을 열 수 없습니다" << std::endl;
		exit(0);
	}
	// 쓸파일을 덮붙이기모드로 연다
	std::ofstream out("STL_강의저장.txt", std::ios::app);
	//저장된 시간을 파일에 기록
	auto now = std::chrono::system_clock::now();
	auto time = std::chrono::system_clock::to_time_t(now);      //utc
	auto lt = std::localtime(&time);                     //현지시간

	auto old = out.imbue(std::locale("ko_KR"));
	out << std::endl << std::endl;
	out << "====================" << std::endl;
	out << filename << std::put_time(lt, ", 저장시간 : %x %A %X ") << std::endl;
	out << "====================" << std::endl;

	out.imbue(old);
	// 읽을파일의 모든 내용을 쓸파일에 쓴다
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}


====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

//void save( string_view ); // 언제나 배열은 포인터로 변한다? const char[] 이런식으로 쓰지마라. string으로

//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

void change(int& a, int& b)
{
    int temp{ a };
    a = b;
    b = temp;
}

int main()
{
    int a{ 1 }, b{ 2 };
    change(a, b);
    cout << a << ", " << b << endl;

    save("save.h");
    save("save.cpp");
    save("STL.cpp");
}

//void save( string_view fileName ) {
//   // fileName을 읽을 파일로 연다.
//   //ifstream in;
//   //cout << sizeof in << endl; // 너 몇바이트 짜리야? ifstream은 272바이트 만큼 차지하네
//   //cout << addressof( in ) << endl; // 넌 어디에 살고 있니?, 얘는 괄호에 넣어야 하네.
//   //cout << typeid( in ).name() << endl; // 네 자료형은 뭐임?
//
//   ifstream in{ fileName.data()}; // 파일 포인터를 유지하게된다. data로 읽기모드로 파일을 열었다.
//   if (not in) { // !보단 not 초보자용 코드가 더 읽기 쉽다.
//      cout << fileName << " - 파일 열기 실패" << endl;
//      exit(0);
//   }
//
//   // 저장할 파일을 덧붙여 쓰기 모드로 연다.
//   ofstream out{ "2024 1학기 STL 월910화78 강의저장.txt", ios::app }; 
//   // output은 존재하지 않으면 새로 만들어서 상관 x
//   // input은 체크를 해야한다.
//
//
//   // 읽을 파일의 내용을 모두 읽어 쓸 파일에 덧붙여 쓴다.
//   // SLT 자료구조와 알고리즘을 이용해본다.
//   
//   // 저장한 시간기록
//   out << endl << endl << endl;
//   
//   auto now = chrono::system_clock::now();            // epoch로 부터 증가한 tick
//   auto time = chrono::system_clock::to_time_t(now);   // UTC 시간으로 변환
//   auto lt = localtime(&time);//포인터를 인자로 넘겨주면 컴파일러가 위험하다 한다. 현지시간으로 변환
//
//   auto old = out.imbue(locale("ko_KR")); // 출력파일의 지역을 한국으로 바꾼다.
//   // 날짜를 내 마음대로 출력한다.
//   out << "==============================================" << endl;
//   out << fileName << put_time(lt, ", 저장시간: %x %A %X ") << endl;
//   out << "==============================================" << endl;
//   out.imbue(old); // 원상복구 윈플때 브러시 쓰고 다시 원상복구 시키는 그런 것. 전세 살다가 나갈떄 원상복구 해야지
//
//   // 좋은 코딩은 아니다 저장을 위한 것.
//   //벡터 v에 코드의 모든 내용이 저장되어 있다.
//   vector<char> v{ istreambuf_iterator<char>{in}, {} };//초기화를 해볼 것이다.
//
//   //for (char c : v)
//   //   out << c; <- 이게더 좋은 코드라고 한다. 저장하는 코드인듯.
//
//   copy(v.begin(), v.end(), ostreambuf_iterator<char>{out}); // 알고리즘을 활용해 더 안좋은 코드지만 저장해봄
//   // 벡터의 시작부터 끝까지 out파일로 저장한다.
//   // 실행할 때마다 덧붙여서 저장된다.
//   
//}

====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 4:59:10 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main()
{
    Dog a{ 1 }, b{ 2 };
    change(a, b);
    cout << a << ", " << b << endl;

    //save("save.h");
    //save("save.cpp");
    save("STL.cpp");
}



====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:05:55 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);

    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:08:52 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:09:09 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:10:15 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:10:28 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:35:45 
====================
#include <random>
#include <iostream>
#include "save.h"
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main()
{
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    cout << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:37:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main()
{
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:49:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    int largest = numeric_limits<int>::min();
    for (int num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:52:47 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    auto pos = max_element(begin(a), end(a));
    cout << "최대값 = " << *pos << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:54:44 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:54:59 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[10000];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:04:32 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    array<int, 100> a;//배열대신 어레이

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:06:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:17:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    std::string_view filename;
    std::ofstream out("int값들.txt", std::ios::app);
    for (int num : a) {
        out << num << endl;
    }
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:19:18 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << endl;
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:25:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:25:30 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:26:13 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:26:29 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:27:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:39:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main(){
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:39:56 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:40:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:40:45 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count=0;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:49:07 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
   
    cout << *max_element(istream_iterator<int>{in}, {}) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 3:35:57 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a{};
    ifstream in("int값들.txt");
    for (int num : a) {
        print("{:8}", num);
    }


    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 3:51:00 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    for (int num : a) {
        print("{:8}", num);
    }


    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:05:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    ofstream out{"int100개를메모리그대로저장.txt"};
    out.write((char*)(a.data()), a.size() * sizeof(int));
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:19:08 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    ofstream out{"int100개를메모리그대로저장.txt",ios::binary};
    out.write((const char*)(a.data()),400);
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:48:52 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};
    ifstream in{ "int100개를메모리그대로저장.txt",(ios::binary) };
    
    in.read((char*)a.data(), 400);
    for (int num : a) {
        cout << num << "\t";
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:49:25 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};
    ifstream in{ "int100개를메모리그대로저장.txt",(ios::binary) };
    
    in.read((char*)a.data(), 400);
    for (int num : a) {
        cout << num << "\t";
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:20 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num<<endl;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:43 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num<<endl;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:58 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:13:56 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{ (char)uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num;
    }
};
//문제 : int 100개를 저장하는데 메모리 bit값을 그대로 저장하자.
//int 100개 = sizeof(int) * 100 = 400 bytes
void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog : dogs) {
        cout << dog << endl;
    }
    ofstream out{ "int100개를그대로저장.txt",(ios::binary) };
    out.write((const char*)(dogs.data()), sizeof(dogs));
    save("STL.cpp");
}


====================
STL_강의저장.txt, 저장시간 : 2024-03-18 월요일 오후 6:53:22 
====================


====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 3:59:29 
====================
#include <iostream>
#include <string>
#include <string_view>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>

void save(std::string_view filename)
{
	//sudo
	//읽을 파일 열기
	std::ifstream in{ filename.data() };
	if (!in)
	{
		std::cout << "파일을 열 수 없습니다" << std::endl;
		exit(0);
	}
	// 쓸파일을 덮붙이기모드로 연다
	std::ofstream out("STL_강의저장.txt", std::ios::app);
	//저장된 시간을 파일에 기록
	auto now = std::chrono::system_clock::now();
	auto time = std::chrono::system_clock::to_time_t(now);      //utc
	auto lt = std::localtime(&time);                     //현지시간

	auto old = out.imbue(std::locale("ko_KR"));
	out << std::endl << std::endl;
	out << "====================" << std::endl;
	out << filename << std::put_time(lt, ", 저장시간 : %x %A %X ") << std::endl;
	out << "====================" << std::endl;

	out.imbue(old);
	// 읽을파일의 모든 내용을 쓸파일에 쓴다
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}

int main(){
	std::cout << "STL 입니다." << '\n';

	std::cout << sizeof(std::string) << std::endl;

	save("STL.cpp");
}

====================
save.h, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
#pragma once
//---------------------------------------------
// save.h
// 
// 한 학기 강의를 저장하는 함수
//---------------------------------------------
#pragma once

void save(std::string_view);

====================
save.cpp, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
#include <iostream>
#include <string>
#include <string_view>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>

void save(std::string_view filename) {
	//sudo
	//읽을 파일 열기
	std::ifstream in{ filename.data() };
	if (!in)
	{
		std::cout << "파일을 열 수 없습니다" << std::endl;
		exit(0);
	}
	// 쓸파일을 덮붙이기모드로 연다
	std::ofstream out("STL_강의저장.txt", std::ios::app);
	//저장된 시간을 파일에 기록
	auto now = std::chrono::system_clock::now();
	auto time = std::chrono::system_clock::to_time_t(now);      //utc
	auto lt = std::localtime(&time);                     //현지시간

	auto old = out.imbue(std::locale("ko_KR"));
	out << std::endl << std::endl;
	out << "====================" << std::endl;
	out << filename << std::put_time(lt, ", 저장시간 : %x %A %X ") << std::endl;
	out << "====================" << std::endl;

	out.imbue(old);
	// 읽을파일의 모든 내용을 쓸파일에 쓴다
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}


====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

//void save( string_view ); // 언제나 배열은 포인터로 변한다? const char[] 이런식으로 쓰지마라. string으로

//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

void change(int& a, int& b)
{
    int temp{ a };
    a = b;
    b = temp;
}

int main()
{
    int a{ 1 }, b{ 2 };
    change(a, b);
    cout << a << ", " << b << endl;

    save("save.h");
    save("save.cpp");
    save("STL.cpp");
}

//void save( string_view fileName ) {
//   // fileName을 읽을 파일로 연다.
//   //ifstream in;
//   //cout << sizeof in << endl; // 너 몇바이트 짜리야? ifstream은 272바이트 만큼 차지하네
//   //cout << addressof( in ) << endl; // 넌 어디에 살고 있니?, 얘는 괄호에 넣어야 하네.
//   //cout << typeid( in ).name() << endl; // 네 자료형은 뭐임?
//
//   ifstream in{ fileName.data()}; // 파일 포인터를 유지하게된다. data로 읽기모드로 파일을 열었다.
//   if (not in) { // !보단 not 초보자용 코드가 더 읽기 쉽다.
//      cout << fileName << " - 파일 열기 실패" << endl;
//      exit(0);
//   }
//
//   // 저장할 파일을 덧붙여 쓰기 모드로 연다.
//   ofstream out{ "2024 1학기 STL 월910화78 강의저장.txt", ios::app }; 
//   // output은 존재하지 않으면 새로 만들어서 상관 x
//   // input은 체크를 해야한다.
//
//
//   // 읽을 파일의 내용을 모두 읽어 쓸 파일에 덧붙여 쓴다.
//   // SLT 자료구조와 알고리즘을 이용해본다.
//   
//   // 저장한 시간기록
//   out << endl << endl << endl;
//   
//   auto now = chrono::system_clock::now();            // epoch로 부터 증가한 tick
//   auto time = chrono::system_clock::to_time_t(now);   // UTC 시간으로 변환
//   auto lt = localtime(&time);//포인터를 인자로 넘겨주면 컴파일러가 위험하다 한다. 현지시간으로 변환
//
//   auto old = out.imbue(locale("ko_KR")); // 출력파일의 지역을 한국으로 바꾼다.
//   // 날짜를 내 마음대로 출력한다.
//   out << "==============================================" << endl;
//   out << fileName << put_time(lt, ", 저장시간: %x %A %X ") << endl;
//   out << "==============================================" << endl;
//   out.imbue(old); // 원상복구 윈플때 브러시 쓰고 다시 원상복구 시키는 그런 것. 전세 살다가 나갈떄 원상복구 해야지
//
//   // 좋은 코딩은 아니다 저장을 위한 것.
//   //벡터 v에 코드의 모든 내용이 저장되어 있다.
//   vector<char> v{ istreambuf_iterator<char>{in}, {} };//초기화를 해볼 것이다.
//
//   //for (char c : v)
//   //   out << c; <- 이게더 좋은 코드라고 한다. 저장하는 코드인듯.
//
//   copy(v.begin(), v.end(), ostreambuf_iterator<char>{out}); // 알고리즘을 활용해 더 안좋은 코드지만 저장해봄
//   // 벡터의 시작부터 끝까지 out파일로 저장한다.
//   // 실행할 때마다 덧붙여서 저장된다.
//   
//}

====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 4:59:10 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main()
{
    Dog a{ 1 }, b{ 2 };
    change(a, b);
    cout << a << ", " << b << endl;

    //save("save.h");
    //save("save.cpp");
    save("STL.cpp");
}



====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:05:55 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);

    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:08:52 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:09:09 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:10:15 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:10:28 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:35:45 
====================
#include <random>
#include <iostream>
#include "save.h"
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main()
{
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    cout << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:37:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main()
{
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:49:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    int largest = numeric_limits<int>::min();
    for (int num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:52:47 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    auto pos = max_element(begin(a), end(a));
    cout << "최대값 = " << *pos << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:54:44 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:54:59 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[10000];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:04:32 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    array<int, 100> a;//배열대신 어레이

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:06:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:17:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    std::string_view filename;
    std::ofstream out("int값들.txt", std::ios::app);
    for (int num : a) {
        out << num << endl;
    }
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:19:18 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << endl;
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:25:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:25:30 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:26:13 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:26:29 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:27:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:39:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main(){
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:39:56 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:40:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:40:45 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count=0;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:49:07 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
   
    cout << *max_element(istream_iterator<int>{in}, {}) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 3:35:57 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a{};
    ifstream in("int값들.txt");
    for (int num : a) {
        print("{:8}", num);
    }


    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 3:51:00 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    for (int num : a) {
        print("{:8}", num);
    }


    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:05:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    ofstream out{"int100개를메모리그대로저장.txt"};
    out.write((char*)(a.data()), a.size() * sizeof(int));
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:19:08 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    ofstream out{"int100개를메모리그대로저장.txt",ios::binary};
    out.write((const char*)(a.data()),400);
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:48:52 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};
    ifstream in{ "int100개를메모리그대로저장.txt",(ios::binary) };
    
    in.read((char*)a.data(), 400);
    for (int num : a) {
        cout << num << "\t";
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:49:25 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};
    ifstream in{ "int100개를메모리그대로저장.txt",(ios::binary) };
    
    in.read((char*)a.data(), 400);
    for (int num : a) {
        cout << num << "\t";
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:20 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num<<endl;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:43 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num<<endl;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:58 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:13:56 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{ (char)uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num;
    }
};
//문제 : int 100개를 저장하는데 메모리 bit값을 그대로 저장하자.
//int 100개 = sizeof(int) * 100 = 400 bytes
void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog : dogs) {
        cout << dog << endl;
    }
    ofstream out{ "int100개를그대로저장.txt",(ios::binary) };
    out.write((const char*)(dogs.data()), sizeof(dogs));
    save("STL.cpp");
}


====================
STL_강의저장.txt, 저장시간 : 2024-03-18 월요일 오후 6:53:22 
====================


====================
STL_강의저장.txt, 저장시간 : 2024-03-18 월요일 오후 6:55:37 
====================


====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 3:59:29 
====================
#include <iostream>
#include <string>
#include <string_view>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>

void save(std::string_view filename)
{
	//sudo
	//읽을 파일 열기
	std::ifstream in{ filename.data() };
	if (!in)
	{
		std::cout << "파일을 열 수 없습니다" << std::endl;
		exit(0);
	}
	// 쓸파일을 덮붙이기모드로 연다
	std::ofstream out("STL_강의저장.txt", std::ios::app);
	//저장된 시간을 파일에 기록
	auto now = std::chrono::system_clock::now();
	auto time = std::chrono::system_clock::to_time_t(now);      //utc
	auto lt = std::localtime(&time);                     //현지시간

	auto old = out.imbue(std::locale("ko_KR"));
	out << std::endl << std::endl;
	out << "====================" << std::endl;
	out << filename << std::put_time(lt, ", 저장시간 : %x %A %X ") << std::endl;
	out << "====================" << std::endl;

	out.imbue(old);
	// 읽을파일의 모든 내용을 쓸파일에 쓴다
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}

int main(){
	std::cout << "STL 입니다." << '\n';

	std::cout << sizeof(std::string) << std::endl;

	save("STL.cpp");
}

====================
save.h, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
#pragma once
//---------------------------------------------
// save.h
// 
// 한 학기 강의를 저장하는 함수
//---------------------------------------------
#pragma once

void save(std::string_view);

====================
save.cpp, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
#include <iostream>
#include <string>
#include <string_view>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>

void save(std::string_view filename) {
	//sudo
	//읽을 파일 열기
	std::ifstream in{ filename.data() };
	if (!in)
	{
		std::cout << "파일을 열 수 없습니다" << std::endl;
		exit(0);
	}
	// 쓸파일을 덮붙이기모드로 연다
	std::ofstream out("STL_강의저장.txt", std::ios::app);
	//저장된 시간을 파일에 기록
	auto now = std::chrono::system_clock::now();
	auto time = std::chrono::system_clock::to_time_t(now);      //utc
	auto lt = std::localtime(&time);                     //현지시간

	auto old = out.imbue(std::locale("ko_KR"));
	out << std::endl << std::endl;
	out << "====================" << std::endl;
	out << filename << std::put_time(lt, ", 저장시간 : %x %A %X ") << std::endl;
	out << "====================" << std::endl;

	out.imbue(old);
	// 읽을파일의 모든 내용을 쓸파일에 쓴다
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}


====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

//void save( string_view ); // 언제나 배열은 포인터로 변한다? const char[] 이런식으로 쓰지마라. string으로

//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

void change(int& a, int& b)
{
    int temp{ a };
    a = b;
    b = temp;
}

int main()
{
    int a{ 1 }, b{ 2 };
    change(a, b);
    cout << a << ", " << b << endl;

    save("save.h");
    save("save.cpp");
    save("STL.cpp");
}

//void save( string_view fileName ) {
//   // fileName을 읽을 파일로 연다.
//   //ifstream in;
//   //cout << sizeof in << endl; // 너 몇바이트 짜리야? ifstream은 272바이트 만큼 차지하네
//   //cout << addressof( in ) << endl; // 넌 어디에 살고 있니?, 얘는 괄호에 넣어야 하네.
//   //cout << typeid( in ).name() << endl; // 네 자료형은 뭐임?
//
//   ifstream in{ fileName.data()}; // 파일 포인터를 유지하게된다. data로 읽기모드로 파일을 열었다.
//   if (not in) { // !보단 not 초보자용 코드가 더 읽기 쉽다.
//      cout << fileName << " - 파일 열기 실패" << endl;
//      exit(0);
//   }
//
//   // 저장할 파일을 덧붙여 쓰기 모드로 연다.
//   ofstream out{ "2024 1학기 STL 월910화78 강의저장.txt", ios::app }; 
//   // output은 존재하지 않으면 새로 만들어서 상관 x
//   // input은 체크를 해야한다.
//
//
//   // 읽을 파일의 내용을 모두 읽어 쓸 파일에 덧붙여 쓴다.
//   // SLT 자료구조와 알고리즘을 이용해본다.
//   
//   // 저장한 시간기록
//   out << endl << endl << endl;
//   
//   auto now = chrono::system_clock::now();            // epoch로 부터 증가한 tick
//   auto time = chrono::system_clock::to_time_t(now);   // UTC 시간으로 변환
//   auto lt = localtime(&time);//포인터를 인자로 넘겨주면 컴파일러가 위험하다 한다. 현지시간으로 변환
//
//   auto old = out.imbue(locale("ko_KR")); // 출력파일의 지역을 한국으로 바꾼다.
//   // 날짜를 내 마음대로 출력한다.
//   out << "==============================================" << endl;
//   out << fileName << put_time(lt, ", 저장시간: %x %A %X ") << endl;
//   out << "==============================================" << endl;
//   out.imbue(old); // 원상복구 윈플때 브러시 쓰고 다시 원상복구 시키는 그런 것. 전세 살다가 나갈떄 원상복구 해야지
//
//   // 좋은 코딩은 아니다 저장을 위한 것.
//   //벡터 v에 코드의 모든 내용이 저장되어 있다.
//   vector<char> v{ istreambuf_iterator<char>{in}, {} };//초기화를 해볼 것이다.
//
//   //for (char c : v)
//   //   out << c; <- 이게더 좋은 코드라고 한다. 저장하는 코드인듯.
//
//   copy(v.begin(), v.end(), ostreambuf_iterator<char>{out}); // 알고리즘을 활용해 더 안좋은 코드지만 저장해봄
//   // 벡터의 시작부터 끝까지 out파일로 저장한다.
//   // 실행할 때마다 덧붙여서 저장된다.
//   
//}

====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 4:59:10 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main()
{
    Dog a{ 1 }, b{ 2 };
    change(a, b);
    cout << a << ", " << b << endl;

    //save("save.h");
    //save("save.cpp");
    save("STL.cpp");
}



====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:05:55 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);

    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:08:52 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:09:09 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:10:15 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:10:28 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:35:45 
====================
#include <random>
#include <iostream>
#include "save.h"
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main()
{
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    cout << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:37:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main()
{
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:49:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    int largest = numeric_limits<int>::min();
    for (int num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:52:47 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    auto pos = max_element(begin(a), end(a));
    cout << "최대값 = " << *pos << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:54:44 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:54:59 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[10000];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:04:32 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    array<int, 100> a;//배열대신 어레이

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:06:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:17:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    std::string_view filename;
    std::ofstream out("int값들.txt", std::ios::app);
    for (int num : a) {
        out << num << endl;
    }
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:19:18 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << endl;
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:25:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:25:30 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:26:13 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:26:29 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:27:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:39:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main(){
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:39:56 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:40:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:40:45 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count=0;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:49:07 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
   
    cout << *max_element(istream_iterator<int>{in}, {}) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 3:35:57 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a{};
    ifstream in("int값들.txt");
    for (int num : a) {
        print("{:8}", num);
    }


    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 3:51:00 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    for (int num : a) {
        print("{:8}", num);
    }


    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:05:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    ofstream out{"int100개를메모리그대로저장.txt"};
    out.write((char*)(a.data()), a.size() * sizeof(int));
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:19:08 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    ofstream out{"int100개를메모리그대로저장.txt",ios::binary};
    out.write((const char*)(a.data()),400);
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:48:52 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};
    ifstream in{ "int100개를메모리그대로저장.txt",(ios::binary) };
    
    in.read((char*)a.data(), 400);
    for (int num : a) {
        cout << num << "\t";
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:49:25 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};
    ifstream in{ "int100개를메모리그대로저장.txt",(ios::binary) };
    
    in.read((char*)a.data(), 400);
    for (int num : a) {
        cout << num << "\t";
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:20 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num<<endl;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:43 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num<<endl;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:58 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:13:56 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{ (char)uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num;
    }
};
//문제 : int 100개를 저장하는데 메모리 bit값을 그대로 저장하자.
//int 100개 = sizeof(int) * 100 = 400 bytes
void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog : dogs) {
        cout << dog << endl;
    }
    ofstream out{ "int100개를그대로저장.txt",(ios::binary) };
    out.write((const char*)(dogs.data()), sizeof(dogs));
    save("STL.cpp");
}


====================
STL_강의저장.txt, 저장시간 : 2024-03-18 월요일 오후 6:53:22 
====================


====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 3:59:29 
====================
#include <iostream>
#include <string>
#include <string_view>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>

void save(std::string_view filename)
{
	//sudo
	//읽을 파일 열기
	std::ifstream in{ filename.data() };
	if (!in)
	{
		std::cout << "파일을 열 수 없습니다" << std::endl;
		exit(0);
	}
	// 쓸파일을 덮붙이기모드로 연다
	std::ofstream out("STL_강의저장.txt", std::ios::app);
	//저장된 시간을 파일에 기록
	auto now = std::chrono::system_clock::now();
	auto time = std::chrono::system_clock::to_time_t(now);      //utc
	auto lt = std::localtime(&time);                     //현지시간

	auto old = out.imbue(std::locale("ko_KR"));
	out << std::endl << std::endl;
	out << "====================" << std::endl;
	out << filename << std::put_time(lt, ", 저장시간 : %x %A %X ") << std::endl;
	out << "====================" << std::endl;

	out.imbue(old);
	// 읽을파일의 모든 내용을 쓸파일에 쓴다
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}

int main(){
	std::cout << "STL 입니다." << '\n';

	std::cout << sizeof(std::string) << std::endl;

	save("STL.cpp");
}

====================
save.h, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
#pragma once
//---------------------------------------------
// save.h
// 
// 한 학기 강의를 저장하는 함수
//---------------------------------------------
#pragma once

void save(std::string_view);

====================
save.cpp, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
#include <iostream>
#include <string>
#include <string_view>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>

void save(std::string_view filename) {
	//sudo
	//읽을 파일 열기
	std::ifstream in{ filename.data() };
	if (!in)
	{
		std::cout << "파일을 열 수 없습니다" << std::endl;
		exit(0);
	}
	// 쓸파일을 덮붙이기모드로 연다
	std::ofstream out("STL_강의저장.txt", std::ios::app);
	//저장된 시간을 파일에 기록
	auto now = std::chrono::system_clock::now();
	auto time = std::chrono::system_clock::to_time_t(now);      //utc
	auto lt = std::localtime(&time);                     //현지시간

	auto old = out.imbue(std::locale("ko_KR"));
	out << std::endl << std::endl;
	out << "====================" << std::endl;
	out << filename << std::put_time(lt, ", 저장시간 : %x %A %X ") << std::endl;
	out << "====================" << std::endl;

	out.imbue(old);
	// 읽을파일의 모든 내용을 쓸파일에 쓴다
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{out});
}


====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 4:05:49 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

//void save( string_view ); // 언제나 배열은 포인터로 변한다? const char[] 이런식으로 쓰지마라. string으로

//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

void change(int& a, int& b)
{
    int temp{ a };
    a = b;
    b = temp;
}

int main()
{
    int a{ 1 }, b{ 2 };
    change(a, b);
    cout << a << ", " << b << endl;

    save("save.h");
    save("save.cpp");
    save("STL.cpp");
}

//void save( string_view fileName ) {
//   // fileName을 읽을 파일로 연다.
//   //ifstream in;
//   //cout << sizeof in << endl; // 너 몇바이트 짜리야? ifstream은 272바이트 만큼 차지하네
//   //cout << addressof( in ) << endl; // 넌 어디에 살고 있니?, 얘는 괄호에 넣어야 하네.
//   //cout << typeid( in ).name() << endl; // 네 자료형은 뭐임?
//
//   ifstream in{ fileName.data()}; // 파일 포인터를 유지하게된다. data로 읽기모드로 파일을 열었다.
//   if (not in) { // !보단 not 초보자용 코드가 더 읽기 쉽다.
//      cout << fileName << " - 파일 열기 실패" << endl;
//      exit(0);
//   }
//
//   // 저장할 파일을 덧붙여 쓰기 모드로 연다.
//   ofstream out{ "2024 1학기 STL 월910화78 강의저장.txt", ios::app }; 
//   // output은 존재하지 않으면 새로 만들어서 상관 x
//   // input은 체크를 해야한다.
//
//
//   // 읽을 파일의 내용을 모두 읽어 쓸 파일에 덧붙여 쓴다.
//   // SLT 자료구조와 알고리즘을 이용해본다.
//   
//   // 저장한 시간기록
//   out << endl << endl << endl;
//   
//   auto now = chrono::system_clock::now();            // epoch로 부터 증가한 tick
//   auto time = chrono::system_clock::to_time_t(now);   // UTC 시간으로 변환
//   auto lt = localtime(&time);//포인터를 인자로 넘겨주면 컴파일러가 위험하다 한다. 현지시간으로 변환
//
//   auto old = out.imbue(locale("ko_KR")); // 출력파일의 지역을 한국으로 바꾼다.
//   // 날짜를 내 마음대로 출력한다.
//   out << "==============================================" << endl;
//   out << fileName << put_time(lt, ", 저장시간: %x %A %X ") << endl;
//   out << "==============================================" << endl;
//   out.imbue(old); // 원상복구 윈플때 브러시 쓰고 다시 원상복구 시키는 그런 것. 전세 살다가 나갈떄 원상복구 해야지
//
//   // 좋은 코딩은 아니다 저장을 위한 것.
//   //벡터 v에 코드의 모든 내용이 저장되어 있다.
//   vector<char> v{ istreambuf_iterator<char>{in}, {} };//초기화를 해볼 것이다.
//
//   //for (char c : v)
//   //   out << c; <- 이게더 좋은 코드라고 한다. 저장하는 코드인듯.
//
//   copy(v.begin(), v.end(), ostreambuf_iterator<char>{out}); // 알고리즘을 활용해 더 안좋은 코드지만 저장해봄
//   // 벡터의 시작부터 끝까지 out파일로 저장한다.
//   // 실행할 때마다 덧붙여서 저장된다.
//   
//}

====================
STL.cpp, 저장시간 : 2024-03-05 화요일 오후 4:59:10 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main()
{
    Dog a{ 1 }, b{ 2 };
    change(a, b);
    cout << a << ", " << b << endl;

    //save("save.h");
    //save("save.cpp");
    save("STL.cpp");
}



====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:05:55 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);

    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:08:52 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:09:09 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int& num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:10:15 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int& num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
stl.cpp, 저장시간 : 2024-03-05 화요일 오후 5:10:28 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시                        (1-1)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 한학기 강의를 저장하는 save 만들기
// ----------------------------------------------------------

#include <iostream>
#include "save.h"

#include <format>
#include <random>
using namespace std;
default_random_engine dre;
uniform_int_distribution uid{ 1000,9999 };


//main을 수정하지 않고 의도대로 실행되게 change를 선언하고 정의하라

class Dog {//클래스에서 이정도만 쓰면 훌륭하다.  
private:
    int age;

public:
    Dog(int age) : age(age) {};
    
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << dog.age;
    }
    operator int() {
        return age;
    }
};

template <class T>
void change(T& a, T& b) {// 1,2 스와핑
    int temp{ a };
    a = b;
    b = temp;
}

int main(){
    int a[1000];
    
    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    int largest = 0;
    for (int num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("stl.cpp");
}





====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:35:45 
====================
#include <random>
#include <iostream>
#include "save.h"
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main()
{
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        cout << format("{:8}", num);
    cout << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:37:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main()
{
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:49:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    int largest = numeric_limits<int>::min();
    for (int num : a)
        if (num > largest)largest = num;
    cout << endl << format("{:8}", largest);
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:52:47 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    auto pos = max_element(begin(a), end(a));
    cout << "최대값 = " << *pos << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:54:44 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[100];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 5:54:59 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    int a[10000];   //마지막으로 사용한다.

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:04:32 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

int main(){
    array<int, 100> a;//배열대신 어레이

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:06:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:17:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);
    std::string_view filename;
    std::ofstream out("int값들.txt", std::ios::app);
    for (int num : a) {
        out << num << endl;
    }
    cout << endl;
    cout << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:19:18 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << endl;
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:25:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:25:30 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:26:13 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:26:29 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:27:33 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이


    for (int& num : a)
        num = uid(dre);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        print("{:8}", num);
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:39:15 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main(){
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:39:56 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;

//문제 : 임의의 int 100개가 있다.
//가장 큰 값을 찾아 화면에 출력하라.

default_random_engine dre;
uniform_int_distribution uid{ 0, 99999 };

void main(){
    array<int, 100> a;//배열대신 어레이

    cout << sizeof(a) << endl;

    for (int& num : a)
        num = uid(dre);

    for (int num : a)
        print("{:8}", num);

    ofstream out("int값들.txt", ios::app);
    for (int num : a) {
        out << num << ' ';
    }
    cout << endl << "최대값 = " << *max_element(begin(a), end(a)) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:40:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:40:45 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
    int num;
    int count=0;
    while (in >> num) {
        ++count;
    }
    cout << "모두 " << count << "개의 int를 읽었다." << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-11 월요일 오후 6:49:07 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a;
    ifstream in("int값들.txt");
    if (not in) exit(0);
   
    cout << *max_element(istream_iterator<int>{in}, {}) << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 3:35:57 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
using namespace std;


void main() {
    array<int, 100> a{};
    ifstream in("int값들.txt");
    for (int num : a) {
        print("{:8}", num);
    }


    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 3:51:00 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    for (int num : a) {
        print("{:8}", num);
    }


    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:05:10 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    ofstream out{"int100개를메모리그대로저장.txt"};
    out.write((char*)(a.data()), a.size() * sizeof(int));
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:19:08 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};

    iota(a.begin(), a.end(),1);
    ofstream out{"int100개를메모리그대로저장.txt",ios::binary};
    out.write((const char*)(a.data()),400);
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:48:52 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};
    ifstream in{ "int100개를메모리그대로저장.txt",(ios::binary) };
    
    in.read((char*)a.data(), 400);
    for (int num : a) {
        cout << num << "\t";
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 4:49:25 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;



void main() {
    array<int, 100> a{};
    ifstream in{ "int100개를메모리그대로저장.txt",(ios::binary) };
    
    in.read((char*)a.data(), 400);
    for (int num : a) {
        cout << num << "\t";
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:20 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num<<endl;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:43 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num<<endl;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:05:58 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{(char) uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num;
    }
};

void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog:dogs) {
        cout << dog << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-12 화요일 오후 5:13:56 
====================
#include <random>
#include <iostream>
#include "save.h"
#include <print>
#include <fstream>
#include <algorithm>
#include <array>
#include <numeric>
using namespace std;
default_random_engine dre;
uniform_int_distribution<int> uidChar{ 'a','z' };
uniform_int_distribution uidNum{ 1,99999 };

class Dog {
    char c{ (char)uidChar(dre) };
    int num{ uidNum(dre) };
public:
    friend ostream& operator<<(ostream& os, const Dog& dog) {
        return os << "글자:" << dog.c << ", 숫자:" << dog.num;
    }
};
//문제 : int 100개를 저장하는데 메모리 bit값을 그대로 저장하자.
//int 100개 = sizeof(int) * 100 = 400 bytes
void main() {
    array<Dog, 100> dogs{};
    for (const Dog& dog : dogs) {
        cout << dog << endl;
    }
    ofstream out{ "int100개를그대로저장.txt",(ios::binary) };
    out.write((const char*)(dogs.data()), sizeof(dogs));
    save("STL.cpp");
}


====================
STL_강의저장.txt, 저장시간 : 2024-03-18 월요일 오후 6:53:22 
====================


====================
STL_강의저장.txt, 저장시간 : 2024-03-18 월요일 오후 6:55:37 
====================


====================
STL_강의저장.txt, 저장시간 : 2024-03-18 월요일 오후 6:56:25 
====================


====================
STL_강의저장.txt, 저장시간 : 2024-03-18 월요일 오후 6:56:46 
====================


====================
STL.cpp, 저장시간 : 2024-03-19 화요일 오후 3:57:18 
====================
//----------------------------------------------------------
// 2024 STL 3.5 월 9-10시
// 24-03-18 
// 실행 파일의 메모리 영역 - STACK CODE DATA Free store(Heap)
// ----------------------------------------------------------

#include <iostream>
#include <string>
#include <array>
#include "save.h"
using namespace std;

void f() {
    int num{ 123 };
    cout << "나는 함수 f입니다." << endl;
    cout << "f()의 변수 num - " << addressof(num) << endl;
}

int gnum{};
string s{ "전역 스트링" };

int main()
{
    string s{ "메모리 관찰" };
    cout << "지역객체 string - " << addressof(s) << endl;

    array<int, 10>a;
    cout << "지역객체 array<int, 10>" << endl;
    for (int i = 0; i < a.size(); ++i)//이 데이터를 바꿀 것이 아니기에 const를 일단 붙여봄... 그랬었음
        cout << "a[" << i << "] - " << addressof(a[i]) << endl;

    f();

    cout << endl << endl;
    cout << "전역 string - " << ::s << endl;
    cout << addressof(::s) << endl;
    cout << "전역 int" << endl;
    cout << addressof(gnum) << endl;

    save("STL.cpp");
}

====================
STL.cpp, 저장시간 : 2024-03-25 월요일 오후 5:39:06 
====================
//----------------------------------------------------------
// 메모리 동적 할당
// [문제] 사용자가 입력한 int num 만큼 메모리를 동적할당하라.
// 이 메모리를 1부터 시작하는 정수로 채운다.
// 이 메모리의 합계를 화면에 출력한다.
// ----------------------------------------------------------


#include <iostream>
#include <vector>
#include "save.h"
using namespace std;

int main(){ 
    int num;
    cout << "숫자를 입력하라 - ";
    cin >> num;

    vector<int> nums;
    for (int i = 1; i <= num; i++) {
        nums.push_back(i);
    }
    int sum = 0;
    for (int i = 0; i < nums.size(); i++) {
        sum += nums[i];
    }
    cout << sum << endl;
    save("STL.cpp");
}

====================
STL.cpp, 저장시간 : 2024-03-25 월요일 오후 5:49:52 
====================
//----------------------------------------------------------
// 메모리 동적 할당
// [문제] 사용자가 입력한 int num 만큼 메모리를 동적할당하라.
// 이 메모리를 1부터 시작하는 정수로 채운다.
// 이 메모리의 합계를 화면에 출력한다.
// ----------------------------------------------------------


#include <iostream>
#include <vector>
#include "save.h"
using namespace std;

int main(){ 
    int num;
    cout << "숫자를 입력하라 - ";
    cin >> num;

    vector<int> nums;
    for (int i = 1; i <= num; i++) {
        nums.push_back(i);
    }
    int sum = 0;
    for (int i = 0; i < nums.size(); i++) {
        sum += nums[i];
    }
    cout << sum << endl;
    save("STL.cpp");
}

====================
STL.cpp, 저장시간 : 2024-03-25 월요일 오후 5:50:07 
====================
//----------------------------------------------------------
// 메모리 동적 할당
// [문제] 사용자가 입력한 int num 만큼 메모리를 동적할당하라.
// 이 메모리를 1부터 시작하는 정수로 채운다.
// 이 메모리의 합계를 화면에 출력한다.
// ----------------------------------------------------------


#include <iostream>
#include <vector>
#include "save.h"
using namespace std;

int main(){ 
    int num;
    cout << "숫자를 입력하라 - ";
    cin >> num;

    vector<int> nums;
    for (int i = 1; i <= num; i++) {
        nums.push_back(i);
    }
    int sum = 0;
    for (int i = 0; i < nums.size(); i++) {
        sum += nums[i];
    }
    cout << sum << endl;
    save("STL.cpp");
}

====================
STL.cpp, 저장시간 : 2024-03-25 월요일 오후 5:50:36 
====================
//----------------------------------------------------------
// 메모리 동적 할당
// [문제] 사용자가 입력한 int num 만큼 메모리를 동적할당하라.
// 이 메모리를 1부터 시작하는 정수로 채운다.
// 이 메모리의 합계를 화면에 출력한다.
// ----------------------------------------------------------


#include <iostream>
#include <vector>
#include "save.h"
using namespace std;

int main(){ 
    int num;
    cout << "숫자를 입력하라 - ";
    cin >> num;

    vector<int> nums;
    for (int i = 1; i <= num; i++) {
        nums.push_back(i);
    }
    float sum = 0;
    for (int i = 0; i < nums.size(); i++) {
        sum += nums[i];
    }
    cout << sum << endl;
    save("STL.cpp");
}

====================
STL.cpp, 저장시간 : 2024-03-25 월요일 오후 5:51:06 
====================
//----------------------------------------------------------
// 메모리 동적 할당
// [문제] 사용자가 입력한 int num 만큼 메모리를 동적할당하라.
// 이 메모리를 1부터 시작하는 정수로 채운다.
// 이 메모리의 합계를 화면에 출력한다.
// ----------------------------------------------------------


#include <iostream>
#include <vector>
#include "save.h"
using namespace std;

int main(){ 
    int num;
    cout << "숫자를 입력하라 - ";
    cin >> num;

    vector<int> nums;
    for (int i = 1; i <= num; i++) {
        nums.push_back(i);
    }
    double sum = 0;
    for (int i = 0; i < nums.size(); i++) {
        sum += nums[i];
    }
    cout << sum << endl;
    save("STL.cpp");
}

====================
STL.cpp, 저장시간 : 2024-03-25 월요일 오후 5:51:24 
====================
//----------------------------------------------------------
// 메모리 동적 할당
// [문제] 사용자가 입력한 int num 만큼 메모리를 동적할당하라.
// 이 메모리를 1부터 시작하는 정수로 채운다.
// 이 메모리의 합계를 화면에 출력한다.
// ----------------------------------------------------------


#include <iostream>
#include <vector>
#include "save.h"
using namespace std;

int main(){ 
    int num;
    cout << "숫자를 입력하라 - ";
    cin >> num;

    vector<int> nums;
    for (int i = 1; i <= num; i++) {
        nums.push_back(i);
    }
    long long sum = 0;
    for (int i = 0; i < nums.size(); i++) {
        sum += nums[i];
    }
    cout << sum << endl;
    save("STL.cpp");
}

====================
STL.cpp, 저장시간 : 2024-03-25 월요일 오후 5:51:33 
====================
//----------------------------------------------------------
// 메모리 동적 할당
// [문제] 사용자가 입력한 int num 만큼 메모리를 동적할당하라.
// 이 메모리를 1부터 시작하는 정수로 채운다.
// 이 메모리의 합계를 화면에 출력한다.
// ----------------------------------------------------------


#include <iostream>
#include <vector>
#include "save.h"
using namespace std;

int main(){ 
    int num;
    cout << "숫자를 입력하라 - ";
    cin >> num;

    vector<int> nums;
    for (int i = 1; i <= num; i++) {
        nums.push_back(i);
    }
    long long sum = 0;
    for (int i = 0; i < nums.size(); i++) {
        sum += nums[i];
    }
    cout << sum << endl;
    save("STL.cpp");
}

====================
STL.cpp, 저장시간 : 2024-03-25 월요일 오후 6:04:35 
====================
//----------------------------------------------------------
// 메모리 동적 할당
// [문제] 사용자가 입력한 int num 만큼 메모리를 동적할당하라.
// 이 메모리를 1부터 시작하는 정수로 채운다.
// 이 메모리의 합계를 화면에 출력한다.
// ----------------------------------------------------------


#include <iostream>
#include <vector>
#include "save.h"
using namespace std;


int main(){ 
    int num;
    cout << "숫자를 입력하라 - ";
    cin >> num;

    vector<int> nums;
    for (int i = 1; i <= num; i++) {
        nums.push_back(i);
    }
    long long sum = 0;
    for (int i = 0; i < nums.size(); i++) {
        sum += nums[i];
    }
    cout << sum << endl;
    save("STL.cpp");
}

====================
STL.cpp, 저장시간 : 2024-03-25 월요일 오후 6:37:26 
====================
//----------------------------------------------------------
// 메모리 동적 할당
// [문제] 사용자가 입력한 int num 만큼 메모리를 동적할당하라.
// 이 메모리를 1부터 시작하는 정수로 채운다.
// 이 메모리의 합계를 화면에 출력한다.
// ----------------------------------------------------------


#include <iostream>
#include <vector>
#include "save.h"
using namespace std;


int main(){ 
    int num;
    cout << "숫자를 입력하라 - ";
    cin >> num;

    vector<int> nums;
    for (int i = 1; i <= num; i++) {
        nums.push_back(i);
    }
    auto sum = 0;
    for (int i = 0; i < nums.size(); i++) {
        sum += nums[i];
    }
    cout << sum << endl;
    save("STL.cpp");
}

====================
STL.cpp, 저장시간 : 2024-03-26 화요일 오후 3:44:09 
====================
//----------------------------------------------------------
// 메모리 동적 할당
// [문제] 사용자가 입력한 int num 만큼 메모리를 동적할당하라.
// 이 메모리를 1부터 시작하는 정수로 채운다.
// 이 메모리의 합계를 화면에 출력한다.
// ----------------------------------------------------------


#include <iostream>
#include <vector>
#include "save.h"
using namespace std;

class Dog {
public:
    Dog() {
        cout << "생성";
    }
    ~Dog() {
        cout << "소멸";
    }
};

int main(){ 
    unique_ptr<Dog> p{ new Dog };

    save("STL.cpp");
}

====================
STL.cpp, 저장시간 : 2024-03-26 화요일 오후 3:44:28 
====================
//----------------------------------------------------------
// 메모리 동적 할당
// [문제] 사용자가 입력한 int num 만큼 메모리를 동적할당하라.
// 이 메모리를 1부터 시작하는 정수로 채운다.
// 이 메모리의 합계를 화면에 출력한다.
// ----------------------------------------------------------


#include <iostream>
#include <vector>
#include "save.h"
using namespace std;

class Dog {
public:
    Dog() {
        cout << "생성";
    }
    ~Dog() {
        cout << "소멸";
    }
};

int main(){ 
    unique_ptr<Dog[]> p{new Dog[50]};

    save("STL.cpp");
}

====================
STL.cpp, 저장시간 : 2024-03-26 화요일 오후 3:49:17 
====================
//----------------------------------------------------------
// 메모리 동적 할당
// [문제] 사용자가 입력한 int num 만큼 메모리를 동적할당하라.
// 이 메모리를 1부터 시작하는 정수로 채운다.
// 이 메모리의 합계를 화면에 출력한다.
// ----------------------------------------------------------


#include <iostream>
#include <vector>
#include "save.h"
using namespace std;

class Dog {
public:
    Dog() {
        cout << "생성";
    }
    ~Dog() {
        cout << "소멸";
    }
};

int main(){ 
    unique_ptr<Dog[]> p=make_unique<Dog[]>(3);

    save("STL.cpp");
}

====================
STL.cpp, 저장시간 : 2024-03-26 화요일 오후 3:49:42 
====================
//----------------------------------------------------------
// 메모리 동적 할당
// [문제] 사용자가 입력한 int num 만큼 메모리를 동적할당하라.
// 이 메모리를 1부터 시작하는 정수로 채운다.
// 이 메모리의 합계를 화면에 출력한다.
// ----------------------------------------------------------


#include <iostream>
#include <vector>
#include "save.h"
using namespace std;

class Dog {
public:
    Dog() {
        cout << "생성";
    }
    ~Dog() {
        cout << "소멸";
    }
};

int main(){ 
    unique_ptr<Dog[]> p=make_unique<Dog[]>(3);

    save("STL.cpp");
}

====================
STL.cpp, 저장시간 : 2024-03-26 화요일 오후 4:04:54 
====================
//----------------------------------------------------------
// 메모리 동적 할당
// [문제] 사용자가 입력한 int num 만큼 메모리를 동적할당하라.
// 이 메모리를 1부터 시작하는 정수로 채운다.
// 이 메모리의 합계를 화면에 출력한다.
// ----------------------------------------------------------


#include <iostream>
#include <vector>
#include "save.h"
using namespace std;



#include <fstream>
#include <iostream>

using namespace std;

int main() {
    ifstream in("STL.cpp");
    if (!in.is_open()) {
        return 3333333;
    }
    ofstream output_file("STL대문자.txt");
    char c;
    while (in.get(c)) {
        if (islower(c)) {
            c = toupper(c);
        }
        output_file << c;
    }

    in.close();
    output_file.close();

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-26 화요일 오후 4:07:12 
====================
//----------------------------------------------------------
// 메모리 동적 할당
// [문제] 사용자가 입력한 int num 만큼 메모리를 동적할당하라.
// 이 메모리를 1부터 시작하는 정수로 채운다.
// 이 메모리의 합계를 화면에 출력한다.
// ----------------------------------------------------------


#include <iostream>
#include <vector>
#include "save.h"
using namespace std;



#include <fstream>
#include <iostream>

using namespace std;

int main() {
    ifstream in("STL.cpp", ios::binary);
    if (!in.is_open()) {
        return 3333333;
    }
    ofstream output_file("STL대문자.txt", ios::binary);
    char c;
    while (in.get(c)) {
        if (islower(c)) {
            c = toupper(c);
        }
        output_file << c;
    }

    in.close();
    output_file.close();

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-26 화요일 오후 4:07:34 
====================
//----------------------------------------------------------
// 메모리 동적 할당
// [문제] 사용자가 입력한 int num 만큼 메모리를 동적할당하라.
// 이 메모리를 1부터 시작하는 정수로 채운다.
// 이 메모리의 합계를 화면에 출력한다.
// ----------------------------------------------------------


#include <iostream>
#include <vector>
#include "save.h"
using namespace std;



#include <fstream>
#include <iostream>

using namespace std;

int main() {
    ifstream in("STL.cpp", ios::binary);
    if (!in.is_open()) {
        return 3333333;
    }
    ofstream output_file("STL대문자.txt", ios::binary);
    char c;
    while (in.get(c)) {
        if (islower(c)) {
            c = toupper(c);
            cout << c;
        }
        output_file << c;
    }

    in.close();
    output_file.close();

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-26 화요일 오후 4:07:53 
====================
//----------------------------------------------------------
// 메모리 동적 할당
// [문제] 사용자가 입력한 int num 만큼 메모리를 동적할당하라.
// 이 메모리를 1부터 시작하는 정수로 채운다.
// 이 메모리의 합계를 화면에 출력한다.
// ----------------------------------------------------------


#include <iostream>
#include <vector>
#include "save.h"
using namespace std;



#include <fstream>
#include <iostream>

using namespace std;

int main() {
    ifstream in("STL.cpp", ios::binary);
    if (!in.is_open()) {
        return 3333333;
    }
    ofstream output_file("STL대문자.txt", ios::binary);
    char c;
    while (in.get(c)) {

            c = toupper(c);
            cout << c;
        output_file << c;
    }

    in.close();
    output_file.close();

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-26 화요일 오후 4:21:09 
====================
//----------------------------------------------------------
// 메모리 동적 할당
// [문제] 사용자가 입력한 int num 만큼 메모리를 동적할당하라.
// 이 메모리를 1부터 시작하는 정수로 채운다.
// 이 메모리의 합계를 화면에 출력한다.
// ----------------------------------------------------------


#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
using namespace std;



#include <fstream>
#include <iostream>

using namespace std;

int main() {
    ifstream in("STL.cpp", ios::binary);
    if (!in.is_open()) {
        return 3333333;
    }
    string input;
    string line;
    ofstream out("STL대문자.txt", ios::binary);
    while (getline(in, line)) {
        input += line + "\n";
    }
    string output;
    transform(input.begin(), input.end(), output.begin(), ::toupper);
    out << output;
    in.close();
    out.close();

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-26 화요일 오후 4:24:54 
====================
//----------------------------------------------------------
// 메모리 동적 할당
// [문제] 사용자가 입력한 int num 만큼 메모리를 동적할당하라.
// 이 메모리를 1부터 시작하는 정수로 채운다.
// 이 메모리의 합계를 화면에 출력한다.
// ----------------------------------------------------------


#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
using namespace std;



#include <fstream>
#include <iostream>

using namespace std;

int main() {
    ifstream in("STL.cpp", ios::binary);
    if (!in.is_open()) {
        return 3333333;
    }
    
    ofstream out("STL대문자.txt", ios::binary);
    /*char c;
    while (in.get(c)) {
        if (islower(c)) {
            c = toupper(c);
        }
        cout << c;
        out << c;
    }*/
    transform(istreambuf_iterator<char>{in}, {}, ostreambuf_iterator<char>{out}, ::toupper);
    in.close();
    out.close();

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-26 화요일 오후 4:30:43 
====================
//----------------------------------------------------------
// 
// [문제] 10000~99999 int100개
// qsort사용해 오름차순으로 정렬
// 결과 출력
// ----------------------------------------------------------


#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"

using namespace std;

int main() {
    ifstream in("STL.cpp", ios::binary);
    if (!in.is_open()) {
        return 3333333;
    }
    
    ofstream out("STL대문자.txt", ios::binary);

    transform(istreambuf_iterator<char>{in}, {}, ostreambuf_iterator<char>{out}, ::toupper);

    in.close();
    out.close();

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-26 화요일 오후 4:39:16 
====================
//----------------------------------------------------------
// 
// [문제] 10000~99999 int100개
// qsort사용해 오름차순으로 정렬
// 결과 출력
// ----------------------------------------------------------


#include <iostream>
#include <random>
#include <algorithm>
#include "save.h"

using namespace std;

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> dist(10000, 99999);

    std::vector<int> numbers;

    for (int i = 0; i < 100; i++) {
        numbers.push_back(dist(gen));
    }
    int* arr = numbers.data();
    qsort(arr, sizeof(arr), sizeof(int), [](const void* a, const void* b) {
        int* ia = (int*)a;
        int* ib = (int*)b;
        return *ia - *ib;
        });
    copy(arr, arr + sizeof(arr), numbers.begin());
    for (int number : numbers) {
        std::cout << number << std::endl;
    }



    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-03-26 화요일 오후 4:40:12 
====================
//----------------------------------------------------------
// 
// [문제] 10000~99999 int100개
// qsort사용해 오름차순으로 정렬
// 결과 출력
// ----------------------------------------------------------


#include <iostream>
#include <random>
#include <algorithm>
#include "save.h"

using namespace std;

int main() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> dist(10000, 99999);

    std::vector<int> numbers;

    for (int i = 0; i < 100; i++) {
        numbers.push_back(dist(gen));
    }
    int* arr = numbers.data();
    qsort(arr, sizeof(arr), sizeof(int), [](const void* a, const void* b) {
        int* ia = (int*)a;
        int* ib = (int*)b;
        return *ia - *ib;
        });
    copy(arr, arr + sizeof(arr), numbers.begin());
    for (int number : numbers) {
        std::cout << number << std::endl;
    }



    save("STL.cpp");
}


====================
stl.cpp, 저장시간 : 2024-04-01 월요일 오후 5:40:58 
====================
#include <iostream>
#include <random>
#include <array>
#include <algorithm>
#include "save.h"

using namespace std;

int main() {
    random_device rd;
    mt19937 dre(rd());
    uniform_int_distribution<> uid(10000, 99999);
    array<int, 100> arr;

    for (int i = 0; i < 100; ++i) {
        arr[i] = uid(dre);
    }

    sort(arr.begin(), arr.end(), [](int a, int b) {
        return a > b;
        });


    for (int number : arr) {
        cout << number << endl;
    }
    save("stl.cpp");

}


====================
stl.cpp, 저장시간 : 2024-04-01 월요일 오후 5:55:53 
====================
#include <iostream>
#include <random>
#include <array>
#include <algorithm>
#include "save.h"

using namespace std;

int main() {
    random_device rd;
    mt19937 dre(rd());
    uniform_int_distribution<> uid(10000, 99999);
    array<int, 100> arr;

    for (int i = 0; i < 100; ++i) {
        arr[i] = uid(dre);
    }

    sort(arr.begin(), arr.end(), [](int a, int b) {
        return a ;
        });


    for (int number : arr) {
        cout << number << endl;
    }
    save("stl.cpp");

}


====================
stl.cpp, 저장시간 : 2024-04-01 월요일 오후 5:56:11 
====================
#include <iostream>
#include <random>
#include <array>
#include <algorithm>
#include "save.h"

using namespace std;

int main() {
    random_device rd;
    mt19937 dre(rd());
    uniform_int_distribution<> uid(10000, 99999);
    array<int, 100> arr;

    for (int i = 0; i < 100; ++i) {
        arr[i] = uid(dre);
    }

    sort(arr.begin(), arr.end(), [](int a, int b) {
        return a > b;
        });


    for (int number : arr) {
        cout << number << endl;
    }
    save("stl.cpp");

}


====================
stl.cpp, 저장시간 : 2024-04-01 월요일 오후 5:56:33 
====================
#include <iostream>
#include <random>
#include <array>
#include <algorithm>
#include "save.h"
#include <print>
using namespace std;

int main() {
    random_device rd;
    mt19937 dre(rd());
    uniform_int_distribution<> uid(10000, 99999);
    array<int, 100> arr;

    for (int i = 0; i < 100; ++i) {
        arr[i] = uid(dre);
    }

    sort(arr.begin(), arr.end(), [](int a, int b) {
        return a > b;
        });


    for (int number : arr) {
        print("{:8}", number);
    }
    save("stl.cpp");

}


====================
stl.cpp, 저장시간 : 2024-04-01 월요일 오후 6:22:21 
====================
#include <iostream>
#include <random>
#include <array>
#include <algorithm>
#include "save.h"
#include <print>
using namespace std;

int main() {
    []() {
        cout << "반갑다. 나는 람다" << endl;
        };
    save("stl.cpp");

}


====================
stl.cpp, 저장시간 : 2024-04-01 월요일 오후 6:23:18 
====================
#include <iostream>
#include <random>
#include <array>
#include <algorithm>
#include "save.h"
#include <print>
using namespace std;

int main() {
    []() {
        cout << "반갑다. 나는 람다" << endl;
        }();
    save("stl.cpp");

}


====================
stl.cpp, 저장시간 : 2024-04-01 월요일 오후 6:30:16 
====================
#include <iostream>
#include <random>
#include <array>
#include <algorithm>
#include "save.h"
#include <print>
using namespace std;

int main() {
    typeid([]() {
        cout << "반갑다. 나는 람다" << endl;
        }()).name();
    save("stl.cpp");

}


====================
stl.cpp, 저장시간 : 2024-04-01 월요일 오후 6:30:28 
====================
#include <iostream>
#include <random>
#include <array>
#include <algorithm>
#include "save.h"
#include <print>
using namespace std;

int main() {
    cout<<typeid([]() {
        cout << "반갑다. 나는 람다" << endl;
        }()).name();
    save("stl.cpp");

}


====================
stl.cpp, 저장시간 : 2024-04-01 월요일 오후 6:31:41 
====================
#include <iostream>
#include <random>
#include <array>
#include <algorithm>
#include "save.h"
#include <print>
using namespace std;

int main() {
    cout<<typeid([]() {
        cout << "반갑다. 나는 람다" << endl;
        }).name();
    save("stl.cpp");

}


====================
stl.cpp, 저장시간 : 2024-04-01 월요일 오후 6:48:40 
====================
#include <iostream>
#include <random>
#include <array>
#include <algorithm>
#include "save.h"
#include <print>
#include <functional>
using namespace std;


int main() {
    string s{ "STL을 관찰하기위한 클래스" };

    cout << s << endl;
    save("stl.cpp");

}


====================
stl.cpp, 저장시간 : 2024-04-01 월요일 오후 6:56:03 
====================
#include <iostream>
#include <random>
#include <array>
#include <algorithm>
#include "save.h"
#include <print>
#include <functional>
using namespace std;


class String {
    string s;
public:
    String(string a) {
        s = a;
    }
    friend ostream& operator<<(std::ostream& os, const String& str) {
        os << str.s;
        return os;
    }
};

int main() {
    String s{ "STL을 관찰하기위한 클래스" };

    cout << s << endl;
    save("stl.cpp");

}


====================
STL.cpp, 저장시간 : 2024-04-02 화요일 오후 4:06:58 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 3-5시                        (5-2)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 
// 
// 4월 23일 화요일 8주 2일 - 중간시험
// 
// callable type - 무한한 타입이 있다
// 
// 호출 가능한 타입을 대표하는 타입을 만들었다 - function
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include "String.h"


using namespace std;


int main()
{
    String s{ "1234567890" };
    String t = s;

    cout << s << endl;
    cout << t << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-02 화요일 오후 4:08:57 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 3-5시                        (5-2)
//
// Visual Studio 17.9.0 이상, Release/x64
// Project 속성/std:c++ latest <== 미리보기 최신, SDL 검사 - NO 끄기
// 
// 
// 
// 4월 23일 화요일 8주 2일 - 중간시험
// 
// callable type - 무한한 타입이 있다
// 
// 호출 가능한 타입을 대표하는 타입을 만들었다 - function
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include "String.h"


using namespace std;


int main()
{
    String s{ "1234567890" };
    String t = s;

    cout << s << endl;
    cout << t << endl;

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-02 화요일 오후 4:17:59 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// callable type - 무한한 타입이 있다.
// 호출 가능한 타입을 대표하는 타입을 만들었따 - function
//   
// sort할 때 어떤 기준으로 정렬할지를 어떻게 sort 함수에게 알려주나?
// 1. 함수포인터를 전닳나다
// 2. 람다를 전달한다 -> visual studio에서는 함수 객체 라고 단언 가능
// 3. () 연산자(FUNCTION CALL)를 오버로딩한 클래스의 객체 -> 함수 객체
// 
// ----------------------------------------------------------

#include <iostream>
#include <array>
#include "save.h"
#include "String.h"
using namespace std;


int main()
{
    array<String, 5> a{ "2024년", "4월", "2일", "화요일", "즐거운 STL 시간" };
    //sort를 사용하여 a를 글자수 기준 오름차순으로 정렬한 후 출력하라.

    for (String s : a)
        cout << s << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-02 화요일 오후 4:18:13 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// callable type - 무한한 타입이 있다.
// 호출 가능한 타입을 대표하는 타입을 만들었따 - function
//   
// sort할 때 어떤 기준으로 정렬할지를 어떻게 sort 함수에게 알려주나?
// 1. 함수포인터를 전닳나다
// 2. 람다를 전달한다 -> visual studio에서는 함수 객체 라고 단언 가능
// 3. () 연산자(FUNCTION CALL)를 오버로딩한 클래스의 객체 -> 함수 객체
// 
// ----------------------------------------------------------

#include <iostream>
#include <array>
#include "save.h"
#include "String.h"
using namespace std;


int main()
{
    array<String, 5> a{ "2024년", "4월", "2일", "화요일", "즐거운 STL 시간" };
    //sort를 사용하여 a를 글자수 기준 오름차순으로 정렬한 후 출력하라.

    for (String s : a)
        cout << s << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-02 화요일 오후 4:30:32 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// callable type - 무한한 타입이 있다.
// 호출 가능한 타입을 대표하는 타입을 만들었따 - function
//   
// sort할 때 어떤 기준으로 정렬할지를 어떻게 sort 함수에게 알려주나?
// 1. 함수포인터를 전닳나다
// 2. 람다를 전달한다 -> visual studio에서는 함수 객체 라고 단언 가능
// 3. () 연산자(FUNCTION CALL)를 오버로딩한 클래스의 객체 -> 함수 객체
// 
// ----------------------------------------------------------

#include <iostream>
#include <array>
#include "save.h"
#include "String.h"
using namespace std;


int main()
{
    array<String, 5> a{ "2024년", "4월", "2일", "화요일", "즐거운 STL 시간" };
    //sort를 사용하여 a를 글자수 기준 오름차순으로 정렬한 후 출력하라.

    for (String s : a)
        cout << s << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-02 화요일 오후 4:31:21 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// callable type - 무한한 타입이 있다.
// 호출 가능한 타입을 대표하는 타입을 만들었따 - function
//   
// sort할 때 어떤 기준으로 정렬할지를 어떻게 sort 함수에게 알려주나?
// 1. 함수포인터를 전닳나다
// 2. 람다를 전달한다 -> visual studio에서는 함수 객체 라고 단언 가능
// 3. () 연산자(FUNCTION CALL)를 오버로딩한 클래스의 객체 -> 함수 객체
// 
// ----------------------------------------------------------

#include <iostream>
#include <array>
#include "save.h"
#include "String.h"
using namespace std;


int main()
{
    array<String, 5> a{ "2024년", "4월", "2일", "화요일", "즐거운 STL 시간" };
    //sort를 사용하여 a를 글자수 기준 오름차순으로 정렬한 후 출력하라.

    for (String &s : a)
        cout << s << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-02 화요일 오후 4:36:12 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// callable type - 무한한 타입이 있다.
// 호출 가능한 타입을 대표하는 타입을 만들었따 - function
//   
// sort할 때 어떤 기준으로 정렬할지를 어떻게 sort 함수에게 알려주나?
// 1. 함수포인터를 전닳나다
// 2. 람다를 전달한다 -> visual studio에서는 함수 객체 라고 단언 가능
// 3. () 연산자(FUNCTION CALL)를 오버로딩한 클래스의 객체 -> 함수 객체
// 
// ----------------------------------------------------------

#include <iostream>
#include <array>
#include "save.h"
#include "String.h"
using namespace std;


int main()
{
    array<String, 5> a{ "2024년", "4월", "2일", "화요일", "즐거운 STL 시간" };
    //sort를 사용하여 a를 글자수 기준 오름차순으로 정렬한 후 출력하라.
    sort(a.begin(), a.end(), [](const String& a, const String& b) {
        return a.getLen() < b.getLen();
        });
    for (String &s : a)
        cout << s << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-02 화요일 오후 4:39:07 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// callable type - 무한한 타입이 있다.
// 호출 가능한 타입을 대표하는 타입을 만들었따 - function
//   
// sort할 때 어떤 기준으로 정렬할지를 어떻게 sort 함수에게 알려주나?
// 1. 함수포인터를 전닳나다
// 2. 람다를 전달한다 -> visual studio에서는 함수 객체 라고 단언 가능
// 3. () 연산자(FUNCTION CALL)를 오버로딩한 클래스의 객체 -> 함수 객체
// 
// ----------------------------------------------------------

#include <iostream>
#include <array>
#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;


int main(){
    array<String, 5> a{ "2024년", "4월", "2일", "화요일", "즐거운 STL 시간" };
    //sort를 사용하여 a를 글자수 기준 오름차순으로 정렬한 후 출력하라.
    sort(a.begin(), a.end(), [](const String& a, const String& b) {
        return a.getLen() < b.getLen();
        });
    for (String &s : a)
        cout << s << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-02 화요일 오후 4:40:02 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// callable type - 무한한 타입이 있다.
// 호출 가능한 타입을 대표하는 타입을 만들었따 - function
//   
// sort할 때 어떤 기준으로 정렬할지를 어떻게 sort 함수에게 알려주나?
// 1. 함수포인터를 전닳나다
// 2. 람다를 전달한다 -> visual studio에서는 함수 객체 라고 단언 가능
// 3. () 연산자(FUNCTION CALL)를 오버로딩한 클래스의 객체 -> 함수 객체
// 
// ----------------------------------------------------------

#include <iostream>
#include <array>
#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;


int main(){
    array<String, 5> a{ "2024년", "4월", "2일", "화요일", "즐거운 STL 시간" };
    //sort를 사용하여 a를 글자수 기준 오름차순으로 정렬한 후 출력하라.
    sort(a.begin(), a.end(), [](const String& a, const String& b) {
        return a.getLen() < b.getLen();
        });
    for (String &s : a)
        cout << s << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-02 화요일 오후 4:40:13 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// callable type - 무한한 타입이 있다.
// 호출 가능한 타입을 대표하는 타입을 만들었따 - function
//   
// sort할 때 어떤 기준으로 정렬할지를 어떻게 sort 함수에게 알려주나?
// 1. 함수포인터를 전닳나다
// 2. 람다를 전달한다 -> visual studio에서는 함수 객체 라고 단언 가능
// 3. () 연산자(FUNCTION CALL)를 오버로딩한 클래스의 객체 -> 함수 객체
// 
// ----------------------------------------------------------

#include <iostream>
#include <array>
#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;


int main(){
    array<String, 5> a{ "2024년", "4월", "2일", "화요일", "즐거운 STL 시간" };
    //sort를 사용하여 a를 글자수 기준 오름차순으로 정렬한 후 출력하라.
    sort(a.begin(), a.end(), [](const String& a, const String& b) {
        return a.getLen() < b.getLen();
        });
    for (String &s : a)
        cout << s << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-02 화요일 오후 4:41:01 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// callable type - 무한한 타입이 있다.
// 호출 가능한 타입을 대표하는 타입을 만들었따 - function
//   
// sort할 때 어떤 기준으로 정렬할지를 어떻게 sort 함수에게 알려주나?
// 1. 함수포인터를 전닳나다
// 2. 람다를 전달한다 -> visual studio에서는 함수 객체 라고 단언 가능
// 3. () 연산자(FUNCTION CALL)를 오버로딩한 클래스의 객체 -> 함수 객체
// 
// ----------------------------------------------------------

#include <iostream>
#include <array>
#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;


int main(){
    array<String, 5> a{ "2024년", "4월", "2일", "화요일", "즐거운 STL 시간" };
    //sort를 사용하여 a를 글자수 기준 오름차순으로 정렬한 후 출력하라.
    관찰 = true;
    sort(a.begin(), a.end(), [](const String& a, const String& b) {
        return a.getLen() < b.getLen();
        });
    관찰 = false;
    for (String &s : a)
        cout << s << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-02 화요일 오후 4:41:43 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// callable type - 무한한 타입이 있다.
// 호출 가능한 타입을 대표하는 타입을 만들었따 - function
//   
// sort할 때 어떤 기준으로 정렬할지를 어떻게 sort 함수에게 알려주나?
// 1. 함수포인터를 전닳나다
// 2. 람다를 전달한다 -> visual studio에서는 함수 객체 라고 단언 가능
// 3. () 연산자(FUNCTION CALL)를 오버로딩한 클래스의 객체 -> 함수 객체
// 
// ----------------------------------------------------------

#include <iostream>
#include <array>
#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;


int main(){
    array<String, 5> a{ "2024년", "4월", "2일", "화요일", "즐거운 STL 시간" };
    //sort를 사용하여 a를 글자수 기준 오름차순으로 정렬한 후 출력하라.
    관찰 = true;
    sort(a.begin(), a.end(), [](const String& a, const String& b) {
        return a.getLen() < b.getLen();
        });
    관찰 = false;
    for (String &s : a)
        cout << s << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-02 화요일 오후 4:41:59 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// callable type - 무한한 타입이 있다.
// 호출 가능한 타입을 대표하는 타입을 만들었따 - function
//   
// sort할 때 어떤 기준으로 정렬할지를 어떻게 sort 함수에게 알려주나?
// 1. 함수포인터를 전닳나다
// 2. 람다를 전달한다 -> visual studio에서는 함수 객체 라고 단언 가능
// 3. () 연산자(FUNCTION CALL)를 오버로딩한 클래스의 객체 -> 함수 객체
// 
// ----------------------------------------------------------

#include <iostream>
#include <array>
#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;


int main(){
    array<String, 5> a{ "2024년", "4월", "2일", "화요일", "즐거운 STL 시간" };
    //sort를 사용하여 a를 글자수 기준 오름차순으로 정렬한 후 출력하라.
    관찰 = true;
    sort(a.begin(), a.end(), [](const String& a, const String& b) {
        return a.getLen() > b.getLen();
        });
    관찰 = false;
    for (String &s : a)
        cout << s << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-02 화요일 오후 4:51:03 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// callable type - 무한한 타입이 있다.
// 호출 가능한 타입을 대표하는 타입을 만들었따 - function
//   
// sort할 때 어떤 기준으로 정렬할지를 어떻게 sort 함수에게 알려주나?
// 1. 함수포인터를 전닳나다
// 2. 람다를 전달한다 -> visual studio에서는 함수 객체 라고 단언 가능
// 3. () 연산자(FUNCTION CALL)를 오버로딩한 클래스의 객체 -> 함수 객체
// 
// ----------------------------------------------------------

#include <iostream>
#include <array>
#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;


int main(){
    array<String, 5> a{ "2024년", "4월", "2일", "화요일", "즐거운 STL 시간" };
    //sort를 사용하여 a를 글자수 기준 오름차순으로 정렬한 후 출력하라.
    관찰 = true;
    sort(a.begin(), a.end(), [](const String& a, const String& b) {
        return a.getLen() > b.getLen();
        });
    관찰 = false;
    for (String &s : a)
        cout << s << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-02 화요일 오후 4:57:48 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// callable type - 무한한 타입이 있다.
// 호출 가능한 타입을 대표하는 타입을 만들었따 - function
//   
// sort할 때 어떤 기준으로 정렬할지를 어떻게 sort 함수에게 알려주나?
// 1. 함수포인터를 전닳나다
// 2. 람다를 전달한다 -> visual studio에서는 함수 객체 라고 단언 가능
// 3. () 연산자(FUNCTION CALL)를 오버로딩한 클래스의 객체 -> 함수 객체
// 
// ----------------------------------------------------------

#include <iostream>
#include <array>
#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;


int main(){
    array<String, 5> a{ "sdfsasadasdfgerwtved", "ldshfsdahflsadhfladsh", "tcniewruptnverl", "dfnaoiewncfig", "fpmewmufiluadsglvhk" };
    //sort를 사용하여 a를 글자수 기준 오름차순으로 정렬한 후 출력하라.
    관찰 = true;
    sort(a.begin(), a.end(), [](const String& a, const String& b) {
        return a.getLen() > b.getLen();
        });
    관찰 = false;
    for (String &s : a)
        cout << s << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-02 화요일 오후 5:17:28 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// callable type - 무한한 타입이 있다.
// 호출 가능한 타입을 대표하는 타입을 만들었따 - function
//   
// sort할 때 어떤 기준으로 정렬할지를 어떻게 sort 함수에게 알려주나?
// 1. 함수포인터를 전닳나다
// 2. 람다를 전달한다 -> visual studio에서는 함수 객체 라고 단언 가능
// 3. () 연산자(FUNCTION CALL)를 오버로딩한 클래스의 객체 -> 함수 객체
// 
// ----------------------------------------------------------

#include <iostream>
#include <array>
#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;


int main(){
    array<String, 5> a{ "sdfsasadasdfgerwtved", "ldshfsdahflsadhfladsh", "tcniewruptnverl", "dfnaoiewncfig", "fpmewmufiluadsglvhk" };
    //sort를 사용하여 a를 글자수 기준 오름차순으로 정렬한 후 출력하라.
    관찰 = true;
    for (const String& s:a) {
        sort(s.getMem(), s.getMem()+ s.getLen());
    }
    
    관찰 = false;
    for (String &s : a)
        cout << s << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-08 월요일 오후 6:39:02 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include <array>
#include <list>
#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;


int main(){
    list <int> a{ 1,3,5,6,7,2,4,5,6,2 };
    for (auto p = a.begin(); p != a.end(); ++p) {
        cout << p.operator*() << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-08 월요일 오후 6:44:14 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include <array>
#include <list>
#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;


int main(){
    list <int> a{ 1,3,5,6,7,2,4,5,6,2 };
    for (auto num:a) {
        cout << num << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-08 월요일 오후 6:44:45 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include <array>
#include <list>
#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;


int main(){
    array <int,10> a{ 1,3,5,6,7,2,4,5,6,2 };
    for (auto num:a) {
        cout << num << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-09 화요일 오후 3:38:09 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include <array>
#include <list>
#include <filesystem>
#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;


int main(){
    array <String, 100> a;
    for (auto num:a) {
        cout << num << endl;
    }
    ifstream in{ "stl.cpp" };
    for (int i = 0; i < 100; ++i) {
        in >> a[i];
    }
    
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-09 화요일 오후 3:39:01 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include <array>
#include <list>
#include <filesystem>
#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;


int main(){
    array <String, 100> a;
    for (auto num:a) {
        cout << num << endl;
    }
    ifstream in{ "stl.cpp" };
    for (int i = 0; i < 100; ++i) {
        in >> a[i];
    }
    for (const String& s : a)
        cout << s << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-09 화요일 오후 3:39:54 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include <array>
#include <list>
#include <filesystem>
#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;


int main(){
    array <String, 100> a;
    for (auto num:a) {
        cout << num << endl;
    }
    ifstream in{ "stl.cpp" };
    for (int i = 0; i < 100; ++i) {
        in >> a[i];
    }
    for (const String& s : a)
        cout << s << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-09 화요일 오후 3:42:02 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include <array>
#include <list>
#include <filesystem>
#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;


int main(){
    array <String, 100> a;
    for (auto num:a) {
        cout << num << endl;
    }
    ifstream in{ "stl.cpp" };
    for (int i = 0; i < 100; ++i) {
        in >> a[i];
    }

    sort(a.begin(), a.end(), [](const String& a, const String& b) {
        return a.getLen() < b.getLen();
        });
    for (const String& s : a)
        cout << s << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-09 화요일 오후 3:42:39 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include <array>
#include <list>
#include <filesystem>
#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;


int main(){
    array <String, 100> a;
    for (auto num:a) {
        cout << num << endl;
    }
    ifstream in{ "stl.cpp" };
    for (int i = 0; i < 100; ++i) {
        in >> a[i];
    }

    sort(a.begin(), a.end(), [](const String& a, const String& b) {
        return a.getLen() < b.getLen();
        });
    for (const String& s : a)
        cout << s << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-09 화요일 오후 3:43:43 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include <array>
#include <list>
#include <filesystem>
#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;


int main(){
    관찰 = true;
    array <String, 100> a;
    for (auto num:a) {
        cout << num << endl;
    }
    ifstream in{ "stl.cpp" };
    for (int i = 0; i < 100; ++i) {
        in >> a[i];
    }

    sort(a.begin(), a.end(), [](const String& a, const String& b) {
        return a.getLen() < b.getLen();
        });
    for (const String& s : a)
        cout << s << endl;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-09 화요일 오후 3:52:51 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include <vector>
#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;


int main(){
    vector<int> v;
    int num;
    cin >> num;
    for (int i = 0; i < num; ++i) {
        v.push_back(rand()%10000);
    }
    for (int i : v) {
        cout << v[i]<<endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-09 화요일 오후 3:56:18 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include <vector>
#include <random>
#include <print>
#include "save.h"
#include "String.h"
#include "STL.h"
using namespace std;
extern bool 관찰;

default_random_engine dre;
uniform_int_distribution uid;

int main(){
    vector<int> v;
    int num;
    cin >> num;
    for (int i = 0; i < num; ++i) {
        v.push_back(uid(dre));
    }
    for (int i : v) {
        print("{:8}", i);
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-09 화요일 오후 3:57:02 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include <vector>
#include <random>
#include <print>
#include "save.h"
#include "String.h"
#include "STL.h"
using namespace std;
extern bool 관찰;

default_random_engine dre;
uniform_int_distribution<> uid(0,10000);

int main(){
    vector<int> v;
    int num;
    cin >> num;
    for (int i = 0; i < num; ++i) {
        v.push_back(uid(dre));
    }
    for (int i : v) {
        print("{:8}", i);
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-09 화요일 오후 3:58:02 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include <vector>
#include <random>
#include <print>
#include <ranges>
#include "save.h"
#include "String.h"
#include "STL.h"
using namespace std;
extern bool 관찰;

default_random_engine dre;
uniform_int_distribution<> uid(0,10000);

int main(){
    vector<int> v;
    int num;
    cin >> num;
    for (int i = 0; i < num; ++i) {
        v.push_back(uid(dre));
    }
    sort(v.begin(), v.end());
    for (int i : v) {
        print("{:8}", i);
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-09 화요일 오후 3:59:01 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include <vector>
#include <random>
#include <print>
#include <ranges>
#include "save.h"
#include "String.h"
#include "STL.h"
using namespace std;
extern bool 관찰;

default_random_engine dre;
uniform_int_distribution<> uid(0,10000);

int main(){
    vector<int> v;
    int num;
    cin >> num;
    for (int i = 0; i < num; ++i) {
        v.push_back(uid(dre));
    }
    sort(v.begin(), v.end());
    for (int num : v|views::take(100)) {
        print("{:8}", num);
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-09 화요일 오후 3:59:38 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include <vector>
#include <random>
#include <print>
#include <ranges>
#include "save.h"
#include "String.h"
#include "STL.h"
using namespace std;
extern bool 관찰;

default_random_engine dre;
uniform_int_distribution<> uid(1,10000);

int main(){
    vector<int> v;
    int num;
    cin >> num;
    for (int i = 0; i < num; ++i) {
        v.push_back(uid(dre));
    }
    sort(v.begin(), v.end());
    for (int num : v|views::take(100)) {
        print("{:8}", num);
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-09 화요일 오후 4:15:55 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include <vector>
#include <random>
#include <print>
#include <ranges>
#include "save.h"
#include "String.h"
#include "STL.h"
using namespace std;
extern bool 관찰;

default_random_engine dre;
uniform_int_distribution<> uid(1,10000);

int main(){
    vector<String> v;

    관찰 = true;
    v.push_back("2024년");
    v.push_back("4월");
    v.push_back("9일");
    
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-09 화요일 오후 4:17:31 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include <vector>
#include <random>
#include <print>
#include <ranges>
#include "save.h"
#include "String.h"
#include "STL.h"
using namespace std;
extern bool 관찰;

default_random_engine dre;
uniform_int_distribution<> uid(1,10000);

int main(){
    vector<String> v;

    관찰 = true;
    v.push_back("1");
    v.push_back("22");
    v.push_back("333");
    
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-09 화요일 오후 4:46:03 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include <vector>
#include <random>
#include <print>
#include <ranges>
#include "save.h"
#include "String.h"
#include "STL.h"
using namespace std;
extern bool 관찰;

default_random_engine dre;
uniform_int_distribution<> uid(1,10000);

int main(){
    vector<String> v;

    관찰 = true;
    v.push_back("1");
    v.push_back("22");
    v.push_back("333");
    
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-09 화요일 오후 4:50:01 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include <vector>
#include <random>
#include <print>
#include <ranges>
#include "save.h"
#include "String.h"
#include "STL.h"
using namespace std;
extern bool 관찰;

default_random_engine dre;
uniform_int_distribution<> uid(1,10000);

int main(){
    vector<String> v;
    v.reserve(20);
    관찰 = true;
    v.push_back("1");
    v.push_back("22");
    v.push_back("333");
    
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-09 화요일 오후 4:55:25 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include <vector>
#include <random>
#include <print>
#include <ranges>
#include "save.h"
#include "String.h"
#include "STL.h"
using namespace std;
extern bool 관찰;

default_random_engine dre;
uniform_int_distribution<> uid(1,10000);

int main(){
    vector<String> v;
    v.reserve(20);
    관찰 = true;
    v.emplace_back("1");
    v.emplace_back("22");
    v.emplace_back("333");
    
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-09 화요일 오후 4:55:46 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include <vector>
#include <random>
#include <print>
#include <ranges>
#include "save.h"
#include "String.h"
#include "STL.h"
using namespace std;
extern bool 관찰;

default_random_engine dre;
uniform_int_distribution<> uid(1,10000);

int main(){
    vector<String> v;
    //v.reserve(20);
    관찰 = true;
    v.emplace_back("1");
    v.emplace_back("22");
    v.emplace_back("333");
    
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-09 화요일 오후 5:04:49 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include <vector>
#include <numeric>
#include "save.h"
#include "String.h"
#include "STL.h"
using namespace std;
extern bool 관찰;

int main(){

        vector<int> v{ istream_iterator<int>{cin},{} };
        int sum = accumulate(v.begin(), v.end(), 0);

        cout << "합계: " << sum << " 평균: " << format("{:.2f}", (double)sum / v.size()) << endl;
    
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-09 화요일 오후 5:08:42 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include <vector>
#include <numeric>
#include "save.h"
#include "String.h"
#include "STL.h"
using namespace std;
extern bool 관찰;

int main() {

    vector<String> v{ istream_iterator<String>{cin},{} };
    sort(v.begin(), v.end(), [](const String& a, const String& b) {
        return a.getLen() > b.getLen();
        });
    for (String i : v) {
        cout << i << endl;
    }

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-09 화요일 오후 5:09:07 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include <vector>
#include <numeric>
#include "save.h"
#include "String.h"
#include "STL.h"
using namespace std;
extern bool 관찰;

int main() {

    vector<String> v{ istream_iterator<String>{cin},{} };
    sort(v.begin(), v.end(), [](const String& a, const String& b) {
        return a.getLen() < b.getLen();
        });
    for (String i : v) {
        cout << i << endl;
    }

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-15 월요일 오후 5:46:55 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include <vector>
#include <numeric>
#include "save.h"
#include "String.h"
#include "STL.h"
using namespace std;
extern bool 관찰;

int main() {

    vector<int> v;
    cout << v.max_size() << endl;
    
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-15 월요일 오후 5:49:16 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include <vector>
#include <numeric>
#include "save.h"
#include "String.h"
#include "STL.h"
using namespace std;
extern bool 관찰;

int main() {

    vector<string> v;
    v.emplace_back("1");
    cout << endl << endl;
    v.push_back("22");
    
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-15 월요일 오후 5:49:27 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include <vector>
#include <numeric>
#include "save.h"
#include "String.h"
#include "STL.h"
using namespace std;
extern bool 관찰;

int main() {

    vector<String> v;
    v.emplace_back("1");
    cout << endl << endl;
    v.push_back("22");
    
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-15 월요일 오후 5:49:43 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include <vector>
#include <numeric>
#include "save.h"
#include "String.h"
#include "STL.h"
using namespace std;
extern bool 관찰;

int main() {
    관찰 = true;
    vector<String> v;
    v.emplace_back("1");
    cout << endl << endl;
    v.push_back("22");
    
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-15 월요일 오후 5:50:11 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include <vector>
#include <numeric>
#include "save.h"
#include "String.h"
#include "STL.h"
using namespace std;
extern bool 관찰;

int main() {
    관찰 = true;
    vector<String> v;
    v.push_back("1");
    cout << endl << endl;
    v.push_back("22");
    
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-15 월요일 오후 6:09:04 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include <vector>
#include <numeric>
#include "save.h"
#include "String.h"
#include "STL.h"
using namespace std;
extern bool 관찰;

int main() {
    관찰 = true;
    vector<String> v;
    v.push_back("1");
    cout << endl << endl;
    v.push_back("22");
    
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-15 월요일 오후 6:35:30 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include <array>
#include <list>
#include <filesystem>
#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;

int main() {
    관찰 = true;
    array <String, 100> a;
    vector<int> count;
    ifstream in{ "stl.cpp" };
    char c;
    array<int, 26> alphabetCount = {};
    while (in >> c) {
        if (isalpha(c)&&islower(c) ){
            alphabetCount[c - 'a']++;
        }
    }
    for (auto num : alphabetCount) {
        cout << char('a' + num) << " - " << alphabetCount[num] << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-15 월요일 오후 6:35:44 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include <array>
#include <list>
#include <filesystem>
#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;

int main() {

    array <String, 100> a;
    vector<int> count;
    ifstream in{ "stl.cpp" };
    char c;
    array<int, 26> alphabetCount = {};
    while (in >> c) {
        if (isalpha(c)&&islower(c) ){
            alphabetCount[c - 'a']++;
        }
    }
    for (auto num : alphabetCount) {
        cout << char('a' + num) << " - " << alphabetCount[num] << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-15 월요일 오후 6:36:07 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include <array>
#include <list>
#include <filesystem>
#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;

int main() {

    vector<int> count;
    ifstream in{ "stl.cpp" };
    char c;
    array<int, 26> alphabetCount = {0};
    while (in >> c) {
        if (isalpha(c)&&islower(c) ){
            alphabetCount[c - 'a']++;
        }
    }
    for (auto num : alphabetCount) {
        cout << char('a' + num) << " - " << alphabetCount[num] << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-15 월요일 오후 6:37:20 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include <array>
#include <list>
#include <filesystem>
#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;

int main() {

    vector<int> count;
    ifstream in{ "stl.cpp" };
    char c;
    array<int, 26> alphabetCount = {0};
    while (in >> c) {
        if (isalpha(c)&&islower(c) ){
            alphabetCount[c - 'a']++;
        }
    }
    for (auto i = 0; i < alphabetCount.size();++i) {
        cout << char('a' + i) << " - " << alphabetCount[i] << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-15 월요일 오후 6:40:59 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include <array>
#include <list>
#include <filesystem>
#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;

int main() {

    vector<int> count;
    ifstream in{ "stl.cpp" };
    char c;
    array<int, 26> alphabetCount = {0};
    while (in >> c) {
        if (isalpha(c)&&islower(c) ){
            alphabetCount[c - 'a']++;
        }
    }
    for (auto i = 0; i < alphabetCount.size();++i) {
        cout << char('a' + i) << " - " << alphabetCount[i] << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-15 월요일 오후 6:41:14 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include <array>
#include <list>
#include <filesystem>
#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;

int main() {

    vector<int> count;
    ifstream in{ "stl.cpp" };
    char c;
    array<int, 26> alphabetCount = {0};
    while (in >> c) {
        if (isalpha(c)&&islower(c) ){
            alphabetCount[c - 'a']++;
        }
    }
    for (auto i = 0; i < alphabetCount.size();++i) {
        cout << char('a' + i) << " - " << alphabetCount[i] << endl;
    }
    //zzzzzzzzzzzzzz
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-15 월요일 오후 6:41:26 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include <array>
#include <list>
#include <filesystem>
#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;

int main() {

    vector<int> count;
    ifstream in{ "stl.cpp" };
    char c;
    array<int, 26> alphabetCount = {0};
    while (in >> c) {
        if (isalpha(c)&&islower(c) ){
            alphabetCount[c - 'a']++;
        }
    }
    for (auto i = 0; i < alphabetCount.size();++i) {
        cout << char('a' + i) << " - " << alphabetCount[i] << endl;
    }
    //z
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-15 월요일 오후 6:42:14 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include <array>
#include <list>
#include <filesystem>
#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;

int main() {

    vector<int> alphabetCount(26);
    ifstream in{ "stl.cpp" };
    char c;

    while (in >> c) {
        if (isalpha(c)&&islower(c) ){
            alphabetCount[c - 'a']++;
        }
    }
    for (auto i = 0; i < alphabetCount.size();++i) {
        cout << char('a' + i) << " - " << alphabetCount[i] << endl;
    }

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-15 월요일 오후 6:53:15 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;

int main() {

    vector<int> v{ 1,2,3,4,5 };
    v.erase(std::remove_if(v.begin(), v.end(), [](int n) { return n == 3; }), v.end());
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-15 월요일 오후 6:54:01 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include "String.h"
using namespace std;
extern bool 관찰;

int main() {

    vector<int> v{ 1,2,3,4,5 };
    v.erase(std::remove_if(v.begin(), v.end(), [](int n) { return n == 3; }), v.end());
    save("STL.cpp");
    for (auto a : v) {
        cout << a << endl;
    }
}


====================
STL.cpp, 저장시간 : 2024-04-15 월요일 오후 6:57:28 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <vector>
#include "String.h"
using namespace std;
extern bool 관찰;

int main() {

    vector<int> v{ 1,2,3,4,5 };
    //v.erase(std::remove_if(v.begin(), v.end(), [](int n) { return n == 3; }), v.end());
    v.erase(find(v.begin(), v.end(), 3));
    save("STL.cpp");
    for (auto a : v) {
        cout << a << endl;
    }
}


====================
STL.cpp, 저장시간 : 2024-04-15 월요일 오후 6:57:44 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <vector>
#include "String.h"
using namespace std;
extern bool 관찰;

int main() {

    vector<int> v{ 1,2,3,4,5 };
    
    v.erase(find(v.begin(), v.end(), 3));
    save("STL.cpp");
    for (auto a : v) {
        cout << a;
    }
}


====================
STL.cpp, 저장시간 : 2024-04-15 월요일 오후 7:02:06 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <vector>
#include "String.h"
using namespace std;
extern bool 관찰;

int main() {

    vector<int> v{ 1,2,3,4,5,3 };
    
    v.erase(find(v.begin(), v.end(), 3));
    save("STL.cpp");
    for (auto a : v) {
        cout << a;
    }
}


====================
STL.cpp, 저장시간 : 2024-04-15 월요일 오후 7:02:28 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <vector>
#include "String.h"
using namespace std;
extern bool 관찰;

int main() {

    vector<int> v{ 1,2,3,4,5,3 };
    
    v.erase(remove(v.begin(), v.end(), 3));
    save("STL.cpp");
    for (auto a : v) {
        cout << a;
    }
}


====================
STL.cpp, 저장시간 : 2024-04-15 월요일 오후 7:03:04 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <vector>
#include "String.h"
using namespace std;
extern bool 관찰;

int main() {

    vector<int> v{ 1,2,3,4,3,5,3 };
    
    v.erase(remove(v.begin(), v.end(), 3),v.end());
    save("STL.cpp");
    for (auto a : v) {
        cout << a;
    }
}


====================
STL.cpp, 저장시간 : 2024-04-15 월요일 오후 7:03:39 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <vector>
#include "String.h"
using namespace std;
extern bool 관찰;

int main() {

    vector<int> v{ 1,2,3,4,5,3 };
    
    v.erase(find(v.begin(), v.end(), 3),v.end());
    save("STL.cpp");
    for (auto a : v) {
        cout << a;
    }
}


====================
STL.cpp, 저장시간 : 2024-04-16 화요일 오후 3:31:43 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <vector>
#include "String.h"
using namespace std;
extern bool 관찰;

int main() {

    vector<int> v{ 1,2,3,4,5,3 };
    
    v.erase(remove(v.begin(), v.end(), 3));
    save("STL.cpp");
    for (auto a : v) {
        cout << a;
    }
}


====================
STL.cpp, 저장시간 : 2024-04-16 화요일 오후 3:32:14 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <vector>
#include "String.h"
using namespace std;
extern bool 관찰;

int main() {

    vector<int> v{ 1,2,3,4,5,3 };
    
    v.erase(remove(v.begin(), v.end(), 3),v.end());
    save("STL.cpp");
    for (auto a : v) {
        cout << a;
    }
}


====================
STL.cpp, 저장시간 : 2024-04-16 화요일 오후 3:32:30 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <vector>
#include "String.h"
using namespace std;
extern bool 관찰;

int main() {

    vector<int> v{ 1,2,3,3,4,5 };
    
    v.erase(remove(v.begin(), v.end(), 3),v.end());
    save("STL.cpp");
    for (auto a : v) {
        cout << a;
    }
}


====================
STL.cpp, 저장시간 : 2024-04-16 화요일 오후 3:32:44 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <vector>
#include "String.h"
using namespace std;
extern bool 관찰;

int main() {

    vector<int> v{ 1,2,3,3,4,5 };
    
    v.erase(remove(v.begin(), v.end(), 3));
    save("STL.cpp");
    for (auto a : v) {
        cout << a;
    }
}


====================
STL.cpp, 저장시간 : 2024-04-16 화요일 오후 3:34:25 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <vector>
#include "String.h"
using namespace std;
extern bool 관찰;

int main() {

    vector<int> v{ 1,2,3,3,4,5 };
    
    erase(v, 3);
    save("STL.cpp");
    for (auto a : v) {
        cout << a;
    }
}


====================
STL.cpp, 저장시간 : 2024-04-16 화요일 오후 3:38:14 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <vector>
#include "String.h"
#include <print>
using namespace std;
extern bool 관찰;

int main() {

    vector<int> v(100);
    
    save("STL.cpp");
    for (auto a : v) {
        print("{:8}", a);
    }
}


====================
STL.cpp, 저장시간 : 2024-04-16 화요일 오후 3:39:11 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <vector>
#include <numeric>
#include "String.h"
#include <print>
using namespace std;
extern bool 관찰;

int main() {

    vector<int> v(100);
    iota (v.begin(), v.end(), 1);
    
    for (auto a : v) {
        print("{:8}", a);
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-16 화요일 오후 3:41:05 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <vector>
#include <numeric>
#include "String.h"
#include <print>
using namespace std;
extern bool 관찰;

int main() {

    vector<int> v(100);
    iota (v.begin(), v.end(), 1);

    v.erase(remove_if(v.begin(), v.end(), [](int n) { return n % 2 == 1; }), v.end());

    for (auto a : v) {
        print("{:8}", a);
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-16 화요일 오후 3:49:31 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <vector>
#include <numeric>
#include "String.h"
#include <print>
using namespace std;
extern bool 관찰;

int main() {

    vector<int> v(100);
    iota (v.begin(), v.end(), 1);

    //v.erase(remove_if(v.begin(), v.end(), [](int n) { return n % 2 == 1; }), v.end());
    erase_if(v, [](int n) { return n % 2 == 1; });
    for (auto a : v) {
        print("{:8}", a);
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-16 화요일 오후 4:14:52 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <vector>
#include <numeric>
#include "String.h"
#include <print>
using namespace std;
extern bool 관찰;

int main() {
    
    vector<String> v{ "1","2","3","4","5"};
    for (const String& s : v) {
        cout << s << endl;
    }
    erase(v, String{ "3" });
    //erase_if(v, [](String a) { return a.getMem() % 2 == 1; });
    for (auto a : v) {
        cout << a << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-16 화요일 오후 4:15:25 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <vector>
#include <numeric>
#include "String.h"
#include <print>
using namespace std;
extern bool 관찰;

int main() {
    
    vector<String> v{ "1","2","3","4","5"};
    for (const String& s : v) {
        cout << s << endl;
    }
    erase(v, String{ "3" });
    //erase_if(v, [](String a) { return a.getMem() % 2 == 1; });
    for (const String& a : v) {
        cout << a << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-16 화요일 오후 4:15:50 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <vector>
#include <numeric>
#include "String.h"
#include <print>
using namespace std;
extern bool 관찰;

int main() {
    
    vector<String> v{ "1","2","3","4","5"};
   
    erase(v, String{ "3" });
    //erase_if(v, [](String a) { return a.getMem() % 2 == 1; });
    for (const String& a : v) {
        cout << a << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-16 화요일 오후 4:17:40 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <vector>
#include <numeric>
#include "String.h"
#include <print>
using namespace std;
extern bool 관찰;

int main() {
    
    vector<String> v{ "1","2","3","4","5"};
   
    //erase(v, String{ "3" });
    erase_if(v, [](String a) { return *(a.getMem()) % 2 == 1; });
    for (const String& a : v) {
        cout << a << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-16 화요일 오후 4:18:00 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <vector>
#include <numeric>
#include "String.h"
#include <print>
using namespace std;
extern bool 관찰;

int main() {
    
    vector<String> v{ "1","2","3","4","5"};
   
    //erase(v, String{ "3" });
    erase_if(v, [](String a) { return *(a.getMem()) == 3; });
    for (const String& a : v) {
        cout << a << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-16 화요일 오후 4:18:15 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <vector>
#include <numeric>
#include "String.h"
#include <print>
using namespace std;
extern bool 관찰;

int main() {
    
    vector<String> v{ "1","2","3","4","5"};
   
    //erase(v, String{ "3" });
    erase_if(v, [](String a) { return *(a.getMem()) % 2 == 1; });
    for (const String& a : v) {
        cout << a << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-16 화요일 오후 4:18:30 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <vector>
#include <numeric>
#include "String.h"
#include <print>
using namespace std;
extern bool 관찰;

int main() {
    
    vector<String> v{ "1","2","3","4","5"};
   
    //erase(v, String{ "3" });
    erase_if(v, [](String a) { return *(a.getMem()) == 1; });
    for (const String& a : v) {
        cout << a << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-16 화요일 오후 4:18:50 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <vector>
#include <numeric>
#include "String.h"
#include <print>
using namespace std;
extern bool 관찰;

int main() {
    
    vector<String> v{ "1","2","3","4","5"};
   
    //erase(v, String{ "3" });
    erase_if(v, [](String a) { return (a.getMem()) == "3"; });
    for (const String& a : v) {
        cout << a << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-16 화요일 오후 4:26:00 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <vector>
#include <numeric>
#include "String.h"
#include <print>
using namespace std;
extern bool 관찰;

int main() {
    
    vector<String> v{ "1","2","4","5"};
    auto p = v.begin();
    ++p, ++p;
    관찰 = true;
    v.insert(p, "3");
    관찰 = false;
    for (const String& a : v) {
        cout << a << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-16 화요일 오후 4:26:30 
====================
//----------------------------------------------------------
// 2024 STL 4.2 화 (5-2주차)
//  
// 컨테이너는 다른 오브젝트들을 저장하는 오브젝트다
// 
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <vector>
#include <numeric>
#include "String.h"
#include <print>
using namespace std;
extern bool 관찰;

int main() {
    
    vector<String> v{ "1","22","4444","55555"};
    auto p = v.begin();
    ++p, ++p;
    관찰 = true;
    v.insert(p, "333");
    관찰 = false;
    for (const String& a : v) {
        cout << a << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-16 화요일 오후 4:35:51 
====================
//----------------------------------------------------------

// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <vector>
#include <list>
#include "String.h"
#include <print>
using namespace std;
extern bool 관찰;

int main() {
    
    list<String> v{ "1","22","4444","55555"};
    auto p = v.begin();
    ++p, ++p;
    관찰 = true;
    v.insert(p, "333");
    관찰 = false;
    for (const String& a : v) {
        cout << a << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-16 화요일 오후 4:36:26 
====================
//----------------------------------------------------------

// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <vector>
#include <list>
#include "String.h"
#include <print>
using namespace std;
extern bool 관찰;

int main() {
    
    list<String> v{ "1","22","4444","55555"};
    auto p = v.begin();
    ++p, ++p;
    관찰 = true;
    v.emplace(p, "333");
    관찰 = false;
    for (const String& a : v) {
        cout << a << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-16 화요일 오후 4:47:14 
====================
//----------------------------------------------------------
//deque
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <deque>
#include "String.h"
#include <print>
using namespace std;
extern bool 관찰;

int main() {
    
    deque <int> d{ 1,2,3,4,5,6,7};
   
    for (auto a : d) {
        cout << a << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-16 화요일 오후 4:48:05 
====================
//----------------------------------------------------------
//deque
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <deque>
#include "String.h"
#include <print>
using namespace std;
extern bool 관찰;

int main() {
    
    deque <int> d{ 1,2,3,4,5,6,7};
   
    for (auto i = 0; i < d.size();++i) {
        cout << &d[i] << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-16 화요일 오후 4:48:49 
====================
//----------------------------------------------------------
//deque
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <deque>
#include "String.h"
#include <print>
using namespace std;
extern bool 관찰;

int main() {
    
    deque <int> d{ 1,2,3,4,5,6,7};
    d.push_back(5);
    for (auto i = 0; i < d.size();++i) {
        cout << &d[i] << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-16 화요일 오후 4:49:14 
====================
//----------------------------------------------------------
//deque
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <deque>
#include "String.h"
#include <print>
using namespace std;
extern bool 관찰;

int main() {
    
    deque <int> d{ 1,2,3,4,5,6,7};
    d.push_front(5);
    for (auto i = 0; i < d.size();++i) {
        cout << &d[i] << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-16 화요일 오후 4:51:13 
====================
//----------------------------------------------------------
//deque
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <deque>
#include "String.h"
#include <print>
using namespace std;
extern bool 관찰;

int main() {
    
    deque <int> d{ 1,2,3,4,5,6,7};
    d.push_front(0);
    d.push_back(8);
    for (auto i = 0; i < d.size();++i) {
        cout << &d[i] << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-16 화요일 오후 4:52:07 
====================
//----------------------------------------------------------
//deque
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <deque>
#include "String.h"
#include <print>
using namespace std;
extern bool 관찰;

int main() {
    
    deque <int> d{ 1,2,3,4,5,6,7};
    d.push_front(0);
    d.push_back(8);
    d.push_back(9);
    for (auto i = 0; i < d.size();++i) {
        cout << &d[i] << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-22 월요일 오후 5:56:12 
====================
//----------------------------------------------------------
//deque
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <deque>
#include <list>
#include "String.h"
#include <print>
using namespace std;
extern bool 관찰;

int main() {
    list<String> cont;
    ifstream in("STL.cpp");

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-22 월요일 오후 6:01:52 
====================
//----------------------------------------------------------
//deque
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <deque>
#include <list>
#include <string>
#include "String.h"
#include <print>
using namespace std;
extern bool 관찰;

int main() {
    list<String> cont;
    ifstream in{ "STL.cpp" };
    String line;
    while (in >> line) { // 한 줄씩 읽기
        cont.emplace_back(line); // list에 추가
    }
    for (auto s : cont) {
        cout << s << endl;
    }
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-22 월요일 오후 6:02:35 
====================
//----------------------------------------------------------
//
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <deque>
#include <list>
#include <string>
#include "String.h"
#include <print>
using namespace std;
extern bool 관찰;

int main() {
    관찰 = true;
    list<String> cont;
    ifstream in{ "STL.cpp" };
    String line;
    
    while (in >> line) { // 한 줄씩 읽기
        cont.emplace_back(line); // list에 추가
    }
    for (auto s : cont) {
        cout << s << endl;
    }

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-22 월요일 오후 6:03:47 
====================
//----------------------------------------------------------
//
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <deque>
#include <list>
#include <string>
#include "String.h"
#include <print>
using namespace std;
extern bool 관찰;

int main() {
    관찰 = true;
    list<String> cont;
    ifstream in{ "STL.cpp" };
    String line;
    
    while (in >> line) { 
        cont.emplace_back(line);
    }
    for (const auto& s : cont) {
        cout << s << endl;
    }

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-22 월요일 오후 6:04:18 
====================
//----------------------------------------------------------
//
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <deque>
#include <list>
#include <string>
#include "String.h"
#include <print>
using namespace std;
extern bool 관찰;

int main() {
    관찰 = true;
    list<String> cont;
    ifstream in{ "STL.cpp" };
    String line;
    
    while (in >> line) { 
        cont.emplace_back(line);
    }
    for (const auto& s : cont) {
        cout << s << endl;
    }

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-22 월요일 오후 6:05:09 
====================
//-----------------------------------------------------------
//
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <list>
#include <string>
#include "String.h"
#include <print>
using namespace std;
extern bool 관찰;

int main() {
    관찰 = true;
    list<String> cont;
    ifstream in{ "STL.cpp" };
    String line;
    
    while (in >> line) { 
        cont.emplace_back(line);
    }
    for (const auto& s : cont) {
        cout << s << endl;
    }

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-22 월요일 오후 6:05:59 
====================
//-----------------------------------------------------------
//
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <vector>
#include <string>
#include "String.h"
#include <print>
using namespace std;
extern bool 관찰;

int main() {
    관찰 = true;
    vector<String> cont;
    ifstream in{ "STL.cpp" };
    String line;
    
    while (in >> line) { 
        cont.emplace_back(line);
    }
    for (const auto& s : cont) {
        cout << s << endl;
    }

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-22 월요일 오후 6:07:13 
====================
//-----------------------------------------------------------
//
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <vector>
#include <string>
#include "String.h"
#include <print>
using namespace std;
extern bool 관찰;

int main() {
    관찰 = true;
    vector<String> cont;
    ifstream in{ "String.cpp" };
    String line;
    
    while (in >> line) { 
        cont.emplace_back(line);
    }
    for (const auto& s : cont) {
        cout << s << endl;
    }

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-22 월요일 오후 6:08:21 
====================
//-----------------------------------------------------------
//
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <list>
#include "String.h"
#include <print>
using namespace std;
extern bool 관찰;

int main() {
    관찰 = true;
    list<String> cont;
    ifstream in{ "String.cpp" };
    String line;
    
    while (in >> line) { 
        cont.emplace_back(line);
    }
    for (const auto& s : cont) {
        cout << s << endl;
    }

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-22 월요일 오후 6:09:10 
====================
//-----------------------------------------------------------
//
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <list>
#include "String.h"
#include <print>
using namespace std;
extern bool 관찰;

int main() {
    관찰 = true;
    list<String> cont;
    ifstream in{ "String.cpp" };
    String line;
    cont = { istream_iterator<String>{in},{} };
    
    for (const auto& s : cont) {
        cout << s << endl;
    }

    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-22 월요일 오후 6:09:50 
====================
//-----------------------------------------------------------
//
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <list>
#include "String.h"
#include <print>
using namespace std;
extern bool 관찰;

int main() {
    관찰 = true;
    list<String> cont;
    ifstream in{ "String.cpp" };
    String line;
    cont = { istream_iterator<String>{in},{} };
    
    for (const auto& s : cont) {
        cout << s << endl;
    }
    관찰 = false;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-22 월요일 오후 6:27:21 
====================
//-----------------------------------------------------------
//
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <list>
#include "String.h"
#include <ranges>
#include <algorithm>
using namespace std;
extern bool 관찰;

int main() {
    관찰 = true;
    list<String> cont;
    ifstream in{ "String.cpp" };
    String line;
    cont = { istream_iterator<String>{in},{} };
    cont.sort([](const String& a, const String& b) {
        return a.getLen() < b.getLen(); });
    /*sort(cont.begin(), cont.end(), [](const String& a, const String& b) {
        return a.getLen() < b.getLen(); 
        });*/
    for (const auto& s : cont) {
        cout << s << endl;
    }
    관찰 = false;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-22 월요일 오후 6:30:30 
====================
//-----------------------------------------------------------
//
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <list>
#include "String.h"
#include <ranges>
#include <algorithm>
using namespace std;
extern bool 관찰;

int main() {
    관찰 = true;
    list<String> cont;
    ifstream in{ "String.cpp" };
    String line;
    cont = { istream_iterator<String>{in},{} };
    cont.sort([](const String& a, const String& b) {
        return a.getLen() < b.getLen(); });
    
    for (const auto& s : cont) {
        cout << s << endl;
    }
    관찰 = false;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-22 월요일 오후 6:30:46 
====================
//-----------------------------------------------------------
//
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <list>
#include "String.h"
#include <ranges>
#include <algorithm>
using namespace std;
extern bool 관찰;

int main() {
    
    list<String> cont;
    ifstream in{ "String.cpp" };
    String line;
    cont = { istream_iterator<String>{in},{} };
    관찰 = true;
    cont.sort([](const String& a, const String& b) {
        return a.getLen() < b.getLen(); });
    
    for (const auto& s : cont) {
        cout << s << endl;
    }
    관찰 = false;
    save("STL.cpp");
}


====================
STL.cpp, 저장시간 : 2024-04-22 월요일 오후 6:45:36 
====================
//-----------------------------------------------------------
//
// ----------------------------------------------------------

#include <iostream>
#include "save.h"
#include <list>
#include "String.h"
#include <ranges>
#include <algorithm>
using namespace std;
extern bool 관찰;

int main() {
    
    list<String> cont;
    ifstream in{ "String.cpp" };
    String line;
    cont = { istream_iterator<String>{in},{} };
    관찰 = true;
    cont.sort([](const String& a, const String& b) {
        return a.getLen() < b.getLen(); });
    cont.reverse();

    for (auto p = cont.rbegin(); p != cont.rend();++p) {
        cout << *p << endl;
    }
    관찰 = false;
    save("STL.cpp");
}
